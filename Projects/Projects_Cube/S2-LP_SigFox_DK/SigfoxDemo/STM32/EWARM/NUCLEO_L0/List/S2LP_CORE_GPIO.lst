###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         12/Jan/2021  12:25:17
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Drivers\S2LP_Middleware\STM32\src\S2LP_CORE_GPIO.c
#    Command line             =
#        -f C:\Users\dvone\AppData\Local\Temp\EW53F8.tmp
#        (C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Drivers\S2LP_Middleware\STM32\src\S2LP_CORE_GPIO.c
#        -D USE_STM32L0XX_NUCLEO -D USE_HAL_DRIVER -D USE_SYSTICK_DELAY -D
#        STM32L053xx -lC
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\List
#        -o
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\Obj
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\Sigfox_Libs\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\ST_API\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\BSP\SDK_Eval_STM32\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\MCU\STM32_HAL\STM32L0xx_HAL_Driver\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\MCU\CMSIS\STM32L0xx\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\S2LP_Middleware\STM32\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\Utils\STM32\inc\\
#        -Ohz --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.4\arm\CMSIS\Core\Include\\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.4\arm\CMSIS\DSP\Include\\")
#    Locale                   =  C
#    List file                =
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\List\S2LP_CORE_GPIO.lst
#    Object file              =
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\Obj\S2LP_CORE_GPIO.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#
###############################################################################

C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Drivers\S2LP_Middleware\STM32\src\S2LP_CORE_GPIO.c
      1          /**
      2           * @file    S2LP_CORE_GPIO.c
      3           * @author  LowPower RF BU - AMG
      4           * @version 4.0.0
      5           * @date    March, 2020
      6           * @brief   This file provides all the low level API to manage SDK eval pin to drive GPIOs.
      7           * @details
      8           *
      9           * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     10           * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     11           * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     12           * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     13           * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     14           * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     15           *
     16           * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     17           * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     18           * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     19           *
     20           * <h2><center>&copy; COPYRIGHT 2020 STMicroelectronics</center></h2>
     21           *
     22           */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "S2LP_Middleware_Config.h"
     26          #include "S2LP_CORE_GPIO.h"
     27          
     28          /** @addtogroup S2LP_CORE_STM32			S2LP CORE - STM32
     29          * @{
     30          */
     31          
     32          /** @defgroup S2LP_CORE_GPIO					S2LP CORE GPIO
     33            * @brief  S2-LP GPIO handling module.
     34            * This module exports all the main operations to deal with GPIO.
     35            * @details See the file <i>@ref S2LP_CORE_GPIO.h</i> for more details.
     36            * @{
     37          */
     38          
     39          /**
     40           * @brief  M2S GPio Port array
     41           */
     42          

   \                                 In section .data, align 4
     43          GPIO_TypeDef* vectpxM2SGpioPort[4] = {M2S_GPIO_0_PORT_NUCLEO,M2S_GPIO_1_PORT_NUCLEO,M2S_GPIO_2_PORT_NUCLEO,M2S_GPIO_3_PORT_NUCLEO};
   \                     vectpxM2SGpioPort:
   \        0x0   0x5000'0000        DC32 0x5000'0000, 0x5000'0000, 0x5000'0400, 0x5000'0800

   \              0x5000'0000  

   \              0x5000'0400  

   \              0x5000'0800
     44          
     45          /**
     46           * @brief  M2S GPio Pin array
     47           */

   \                                 In section .text, align 4, keep-with-next
     48          static const uint16_t s_vectnM2SGpioPin[4] = {
   \                     s_vectnM2SGpioPin:
   \        0x0   0x0001 0x0010      DC16 1, 16, 1, 1

   \               0x0001 0x000

   \              1
     49                  M2S_GPIO_0_PIN,
     50                  M2S_GPIO_1_PIN,
     51                  M2S_GPIO_2_PIN,
     52                  M2S_GPIO_3_PIN
     53          };
     54          
     55          /**
     56           * @brief  M2S GPio Speed array
     57           */

   \                                 In section .text, align 4, keep-with-next
     58          static const uint32_t s_vectxM2SGpioSpeed[4] = {
   \                     s_vectxM2SGpioSpeed:
   \        0x0   0x0000'0003        DC32 3, 3, 3, 3

   \              0x0000'0003  

   \              0x0000'0003  

   \              0x0000'0003
     59                  M2S_GPIO_0_SPEED,
     60                  M2S_GPIO_1_SPEED,
     61                  M2S_GPIO_2_SPEED,
     62                  M2S_GPIO_3_SPEED
     63          };
     64          
     65          /**
     66           * @brief  M2S GPio PuPd array
     67           */

   \                                 In section .text, align 4, keep-with-next
     68          static const uint32_t s_vectxM2SGpioPuPd[4] = {
   \                     s_vectxM2SGpioPuPd:
   \        0x0   0x0000'0000        DC32 0, 0, 0, 0

   \              0x0000'0000  

   \              0x0000'0000  

   \              0x0000'0000
     69                  M2S_GPIO_0_PUPD,
     70                  M2S_GPIO_1_PUPD,
     71                  M2S_GPIO_2_PUPD,
     72                  M2S_GPIO_3_PUPD
     73          };
     74          
     75          /**
     76           * @brief  M2S Exti Mode array
     77           */

   \                                 In section .text, align 4, keep-with-next
     78          static const uint32_t s_vectxM2sGpioExtiMode[4] = {
   \                     s_vectxM2sGpioExtiMode:
   \        0x0   0x1021'0000        DC32 270'598'144, 270'598'144, 270'598'144, 269'549'568

   \              0x1021'0000  

   \              0x1021'0000  

   \              0x1011'0000
     79                  M2S_GPIO_0_EXTI_MODE,
     80                  M2S_GPIO_1_EXTI_MODE,
     81                  M2S_GPIO_2_EXTI_MODE,
     82                  M2S_GPIO_3_EXTI_MODE
     83          };
     84          
     85          
     86          /**
     87           * @brief  M2S Exti IRQn array
     88           */

   \                                 In section .text, align 4, keep-with-next
     89          static const IRQn_Type s_vectcM2SGpioExtiIrqn[4] = {
   \                     s_vectcM2SGpioExtiIrqn:
   \        0x0   0x05 0x07          DC8 5, 7, 5, 5

   \              0x05 0x05
     90                  M2S_GPIO_0_EXTI_IRQN,
     91                  M2S_GPIO_1_EXTI_IRQN,
     92                  M2S_GPIO_2_EXTI_IRQN,
     93                  M2S_GPIO_3_EXTI_IRQN
     94          };
     95          
     96          
     97          /** @defgroup S2LP_CORE_GPIO_Functions			S2LP CORE GPIO exported functions
     98          * @{
     99          */
    100          
    101          
    102          
    103          /**
    104           * @brief  Configures MCU GPIO and EXTI Line for GPIOs.
    105           * @param  xGpio Specifies the GPIO to be configured.
    106           *         This parameter can be one of following parameters:
    107           *         @arg M2S_GPIO_0: GPIO_0
    108           *         @arg M2S_GPIO_1: GPIO_1
    109           *         @arg M2S_GPIO_2: GPIO_2
    110           *         @arg M2S_GPIO_3: GPIO_3
    111           *         @arg M2S_GPIO_SDN: GPIO_SDN
    112           * @param  xGpioMode Specifies GPIO mode.
    113           *         This parameter can be one of following parameters:
    114           *         @arg M2S_MODE_GPIO_IN: MCU GPIO will be used as simple input.
    115           *         @arg M2S_MODE_EXTI_IN: MCU GPIO will be connected to EXTI line with interrupt
    116           *         generation capability.
    117           *         @arg M2S_MODE_GPIO_OUT: MCU GPIO will be used as simple output.
    118           * @retval None.
    119           */

   \                                 In section .text, align 4, keep-with-next
    120          void S2LP_Middleware_GpioInit(M2SGpioPin xGpio, M2SGpioMode xGpioMode)
    121          {
   \                     S2LP_Middleware_GpioInit: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
    122            GPIO_InitTypeDef GPIO_InitStructure;
    123          
    124            /* Check the parameters */
    125            assert_param(IS_M2S_GPIO_PIN(xGpio));
    126            assert_param(IS_M2S_GPIO_MODE(xGpioMode));
    127          
    128            switch(xGpio)
   \        0x4   0x2201             MOVS     R2,#+1
   \        0x6   0x....             LDR      R3,??DataTable13  ;; 0x4002102c
   \        0x8   0x0004             MOVS     R4,R0
   \        0xA   0xD005             BEQ      ??S2LP_Middleware_GpioInit_0
   \        0xC   0x2802             CMP      R0,#+2
   \        0xE   0xD00B             BEQ      ??S2LP_Middleware_GpioInit_1
   \       0x10   0xD302             BCC      ??S2LP_Middleware_GpioInit_0
   \       0x12   0x2803             CMP      R0,#+3
   \       0x14   0xD007             BEQ      ??S2LP_Middleware_GpioInit_2
   \       0x16   0xE00E             B        ??S2LP_Middleware_GpioInit_3
    129            {
    130            case M2S_GPIO_0:
    131              M2S_GPIO_0_CLOCK_NUCLEO();
    132              break;
    133            case M2S_GPIO_1:
    134              M2S_GPIO_1_CLOCK_NUCLEO();
   \                     ??S2LP_Middleware_GpioInit_0: (+1)
   \       0x18   0x681C             LDR      R4,[R3, #+0]
   \       0x1A   0x4314             ORRS     R4,R4,R2
   \       0x1C   0x601C             STR      R4,[R3, #+0]
   \       0x1E   0x681B             LDR      R3,[R3, #+0]
   \       0x20   0x4013             ANDS     R3,R3,R2
   \       0x22   0x9300             STR      R3,[SP, #+0]
   \       0x24   0xE006             B        ??S2LP_Middleware_GpioInit_4
    135              break;
    136            case M2S_GPIO_2:
    137              M2S_GPIO_2_CLOCK_NUCLEO();
    138              break;
    139            case M2S_GPIO_3:
    140              M2S_GPIO_3_CLOCK_NUCLEO();
   \                     ??S2LP_Middleware_GpioInit_2: (+1)
   \       0x26   0x2404             MOVS     R4,#+4
   \                     ??S2LP_Middleware_GpioInit_1: (+1)
   \       0x28   0x681D             LDR      R5,[R3, #+0]
   \       0x2A   0x4325             ORRS     R5,R5,R4
   \       0x2C   0x601D             STR      R5,[R3, #+0]
   \       0x2E   0x681B             LDR      R3,[R3, #+0]
   \       0x30   0x401C             ANDS     R4,R4,R3
   \       0x32   0x9400             STR      R4,[SP, #+0]
   \                     ??S2LP_Middleware_GpioInit_4: (+1)
   \       0x34   0x9B00             LDR      R3,[SP, #+0]
    141              break;
   \                     ??S2LP_Middleware_GpioInit_3: (+1)
   \       0x36   0x000C             MOVS     R4,R1
    142            }
    143          
    144            /* Configures MCU GPIO */
    145            switch (xGpioMode) {
   \       0x38   0x0083             LSLS     R3,R0,#+2
   \       0x3A   0x0021             MOVS     R1,R4
   \       0x3C   0xD005             BEQ      ??S2LP_Middleware_GpioInit_5
   \       0x3E   0x2C02             CMP      R4,#+2
   \       0x40   0xD001             BEQ      ??S2LP_Middleware_GpioInit_6
   \       0x42   0xD304             BCC      ??S2LP_Middleware_GpioInit_7
   \       0x44   0xE007             B        ??S2LP_Middleware_GpioInit_8
    146            case M2S_MODE_GPIO_OUT:
    147              GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
   \                     ??S2LP_Middleware_GpioInit_6: (+1)
   \       0x46   0x9202             STR      R2,[SP, #+8]
    148              break;
   \       0x48   0xE005             B        ??S2LP_Middleware_GpioInit_8
    149            case M2S_MODE_GPIO_IN:
    150              GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
   \                     ??S2LP_Middleware_GpioInit_5: (+1)
   \       0x4A   0x2100             MOVS     R1,#+0
   \       0x4C   0xE002             B        ??S2LP_Middleware_GpioInit_9
    151              break;
    152            case M2S_MODE_EXTI_IN:
    153              GPIO_InitStructure.Mode = s_vectxM2sGpioExtiMode[xGpio];
   \                     ??S2LP_Middleware_GpioInit_7: (+1)
   \       0x4E   0xBF00             Nop
   \       0x50   0x....             ADR.N    R1,s_vectxM2sGpioExtiMode
   \       0x52   0x58C9             LDR      R1,[R1, R3]
   \                     ??S2LP_Middleware_GpioInit_9: (+1)
   \       0x54   0x9102             STR      R1,[SP, #+8]
    154              break;
    155            default:
    156              break;
    157            }
    158          
    159            GPIO_InitStructure.Pin = s_vectnM2SGpioPin[xGpio];
   \                     ??S2LP_Middleware_GpioInit_8: (+1)
   \       0x56   0xBF00             Nop
   \       0x58   0x....             ADR.N    R1,s_vectnM2SGpioPin
   \       0x5A   0x0040             LSLS     R0,R0,#+1
   \       0x5C   0x5A0D             LDRH     R5,[R1, R0]
   \       0x5E   0x9501             STR      R5,[SP, #+4]
    160            GPIO_InitStructure.Pull = s_vectxM2SGpioPuPd[xGpio];
   \       0x60   0x....             ADR.N    R0,s_vectxM2SGpioPuPd
   \       0x62   0x58C0             LDR      R0,[R0, R3]
   \       0x64   0x9003             STR      R0,[SP, #+12]
    161            GPIO_InitStructure.Speed = s_vectxM2SGpioSpeed[xGpio];
   \       0x66   0xBF00             Nop
   \       0x68   0x....             ADR.N    R0,s_vectxM2SGpioSpeed
   \       0x6A   0x58C0             LDR      R0,[R0, R3]
   \       0x6C   0x9004             STR      R0,[SP, #+16]
    162          
    163            HAL_GPIO_Init(vectpxM2SGpioPort[xGpio], &GPIO_InitStructure);
   \       0x6E   0xA901             ADD      R1,SP,#+4
   \       0x70   0x....             LDR      R0,??DataTable13_1
   \       0x72   0x58C0             LDR      R0,[R0, R3]
   \       0x74   0x....'....        BL       HAL_GPIO_Init
    164          
    165            if (xGpioMode == M2S_MODE_EXTI_IN) {
   \       0x78   0x2C01             CMP      R4,#+1
   \       0x7A   0xD101             BNE      ??S2LP_Middleware_GpioInit_10
    166              __HAL_GPIO_EXTI_CLEAR_IT(s_vectnM2SGpioPin[xGpio]);
   \       0x7C   0x....             LDR      R0,??DataTable13_2  ;; 0x40010414
   \       0x7E   0x6005             STR      R5,[R0, #+0]
    167            }
    168          }
   \                     ??S2LP_Middleware_GpioInit_10: (+1)
   \       0x80   0xB007             ADD      SP,SP,#+28
   \       0x82   0xBD30             POP      {R4,R5,PC}       ;; return
    169          
    170          /**
    171           * @brief  Configures MCU GPIO and EXTI Line for GPIOs.
    172           *         This Ex version include the edge_direction as a parameter, to ovveride the configuration value.
    173           * @param  xGpio Specifies the GPIO to be configured.
    174           *         This parameter can be one of following parameters:
    175           *         @arg M2S_GPIO_0: GPIO_0
    176           *         @arg M2S_GPIO_1: GPIO_1
    177           *         @arg M2S_GPIO_2: GPIO_2
    178           *         @arg M2S_GPIO_3: GPIO_3
    179           *         @arg M2S_GPIO_SDN: GPIO_SDN
    180           * @param  xGpioMode Specifies GPIO mode.
    181           *         This parameter can be one of following parameters:
    182           *         @arg M2S_MODE_GPIO_IN: MCU GPIO will be used as simple input.
    183           *         @arg M2S_MODE_EXTI_IN: MCU GPIO will be connected to EXTI line with interrupt
    184           *         generation capability.
    185           *         @arg M2S_MODE_GPIO_OUT: MCU GPIO will be used as simple output.
    186           * @retval None.
    187           */

   \                                 In section .text, align 4, keep-with-next
    188          void S2LP_Middleware_GpioInitEx(M2SGpioPin xGpio, M2SGpioMode xGpioMode, uint8_t edge_direction)
    189          {
   \                     S2LP_Middleware_GpioInitEx: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
    190            GPIO_InitTypeDef GPIO_InitStructure;
    191          
    192            /* Check the parameters */
    193            assert_param(IS_M2S_GPIO_PIN(xGpio));
    194            assert_param(IS_M2S_GPIO_MODE(xGpioMode));
    195          
    196            switch(xGpio)
   \        0x4   0x2301             MOVS     R3,#+1
   \        0x6   0x....             LDR      R4,??DataTable13  ;; 0x4002102c
   \        0x8   0x0005             MOVS     R5,R0
   \        0xA   0xD005             BEQ      ??S2LP_Middleware_GpioInitEx_0
   \        0xC   0x2802             CMP      R0,#+2
   \        0xE   0xD00B             BEQ      ??S2LP_Middleware_GpioInitEx_1
   \       0x10   0xD302             BCC      ??S2LP_Middleware_GpioInitEx_0
   \       0x12   0x2803             CMP      R0,#+3
   \       0x14   0xD007             BEQ      ??S2LP_Middleware_GpioInitEx_2
   \       0x16   0xE00E             B        ??S2LP_Middleware_GpioInitEx_3
    197            {
    198            case M2S_GPIO_0:
    199              M2S_GPIO_0_CLOCK_NUCLEO();
    200              break;
    201            case M2S_GPIO_1:
    202              M2S_GPIO_1_CLOCK_NUCLEO();
   \                     ??S2LP_Middleware_GpioInitEx_0: (+1)
   \       0x18   0x6825             LDR      R5,[R4, #+0]
   \       0x1A   0x431D             ORRS     R5,R5,R3
   \       0x1C   0x6025             STR      R5,[R4, #+0]
   \       0x1E   0x6824             LDR      R4,[R4, #+0]
   \       0x20   0x401C             ANDS     R4,R4,R3
   \       0x22   0x9400             STR      R4,[SP, #+0]
   \       0x24   0xE006             B        ??S2LP_Middleware_GpioInitEx_4
    203              break;
    204            case M2S_GPIO_2:
    205              M2S_GPIO_2_CLOCK_NUCLEO();
    206              break;
    207            case M2S_GPIO_3:
    208              M2S_GPIO_3_CLOCK_NUCLEO();
   \                     ??S2LP_Middleware_GpioInitEx_2: (+1)
   \       0x26   0x2504             MOVS     R5,#+4
   \                     ??S2LP_Middleware_GpioInitEx_1: (+1)
   \       0x28   0x6826             LDR      R6,[R4, #+0]
   \       0x2A   0x432E             ORRS     R6,R6,R5
   \       0x2C   0x6026             STR      R6,[R4, #+0]
   \       0x2E   0x6824             LDR      R4,[R4, #+0]
   \       0x30   0x4025             ANDS     R5,R5,R4
   \       0x32   0x9500             STR      R5,[SP, #+0]
   \                     ??S2LP_Middleware_GpioInitEx_4: (+1)
   \       0x34   0x9C00             LDR      R4,[SP, #+0]
    209              break;
   \                     ??S2LP_Middleware_GpioInitEx_3: (+1)
   \       0x36   0x000C             MOVS     R4,R1
    210            }
    211          
    212            /* Configures MCU GPIO */
    213            switch (xGpioMode) {
   \       0x38   0xD005             BEQ      ??S2LP_Middleware_GpioInitEx_5
   \       0x3A   0x2902             CMP      R1,#+2
   \       0x3C   0xD001             BEQ      ??S2LP_Middleware_GpioInitEx_6
   \       0x3E   0xD304             BCC      ??S2LP_Middleware_GpioInitEx_7
   \       0x40   0xE009             B        ??S2LP_Middleware_GpioInitEx_8
    214            case M2S_MODE_GPIO_OUT:
    215              GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
   \                     ??S2LP_Middleware_GpioInitEx_6: (+1)
   \       0x42   0x9302             STR      R3,[SP, #+8]
    216              break;
   \       0x44   0xE007             B        ??S2LP_Middleware_GpioInitEx_8
    217            case M2S_MODE_GPIO_IN:
    218              GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
   \                     ??S2LP_Middleware_GpioInitEx_5: (+1)
   \       0x46   0x2100             MOVS     R1,#+0
   \       0x48   0xE004             B        ??S2LP_Middleware_GpioInitEx_9
    219              break;
    220            case M2S_MODE_EXTI_IN:
    221              {
    222          	if(edge_direction)
   \                     ??S2LP_Middleware_GpioInitEx_7: (+1)
   \       0x4A   0x2A00             CMP      R2,#+0
   \       0x4C   0xD001             BEQ      ??S2LP_Middleware_GpioInitEx_10
    223          	  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
   \       0x4E   0x....             LDR      R1,??DataTable13_3  ;; 0x10110000
   \       0x50   0xE000             B        ??S2LP_Middleware_GpioInitEx_9
    224          	else
    225          	  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
   \                     ??S2LP_Middleware_GpioInitEx_10: (+1)
   \       0x52   0x....             LDR      R1,??DataTable13_4  ;; 0x10210000
   \                     ??S2LP_Middleware_GpioInitEx_9: (+1)
   \       0x54   0x9102             STR      R1,[SP, #+8]
    226          
    227          	break;
    228              }
    229            default:
    230              break;
    231            }
    232          
    233            GPIO_InitStructure.Pin = s_vectnM2SGpioPin[xGpio];
   \                     ??S2LP_Middleware_GpioInitEx_8: (+1)
   \       0x56   0xBF00             Nop
   \       0x58   0x....             ADR.N    R1,s_vectnM2SGpioPin
   \       0x5A   0x0042             LSLS     R2,R0,#+1
   \       0x5C   0x5A8D             LDRH     R5,[R1, R2]
   \       0x5E   0x9501             STR      R5,[SP, #+4]
    234            GPIO_InitStructure.Pull = s_vectxM2SGpioPuPd[xGpio];
   \       0x60   0x0080             LSLS     R0,R0,#+2
   \       0x62   0xBF00             Nop
   \       0x64   0x....             ADR.N    R1,s_vectxM2SGpioPuPd
   \       0x66   0x5809             LDR      R1,[R1, R0]
   \       0x68   0x9103             STR      R1,[SP, #+12]
    235            GPIO_InitStructure.Speed = s_vectxM2SGpioSpeed[xGpio];
   \       0x6A   0xBF00             Nop
   \       0x6C   0x....             ADR.N    R1,s_vectxM2SGpioSpeed
   \       0x6E   0x5809             LDR      R1,[R1, R0]
   \       0x70   0x9104             STR      R1,[SP, #+16]
    236          
    237            HAL_GPIO_Init(vectpxM2SGpioPort[xGpio], &GPIO_InitStructure);
   \       0x72   0xA901             ADD      R1,SP,#+4
   \       0x74   0x....             LDR      R2,??DataTable13_1
   \       0x76   0x5810             LDR      R0,[R2, R0]
   \       0x78   0x....'....        BL       HAL_GPIO_Init
    238          
    239            if (xGpioMode == M2S_MODE_EXTI_IN) {
   \       0x7C   0x2C01             CMP      R4,#+1
   \       0x7E   0xD101             BNE      ??S2LP_Middleware_GpioInitEx_11
    240              __HAL_GPIO_EXTI_CLEAR_IT(s_vectnM2SGpioPin[xGpio]);
   \       0x80   0x....             LDR      R0,??DataTable13_2  ;; 0x40010414
   \       0x82   0x6005             STR      R5,[R0, #+0]
    241            }
    242          }
   \                     ??S2LP_Middleware_GpioInitEx_11: (+1)
   \       0x84   0xB006             ADD      SP,SP,#+24
   \       0x86   0xBD70             POP      {R4-R6,PC}       ;; return
    243          
    244          /**
    245           * @brief  Enables or disables the interrupt on GPIO .
    246           * @param  xGpio Specifies the GPIO whose priority shall be changed.
    247           *         This parameter can be one of following parameters:
    248           *         @arg M2S_GPIO_0: GPIO_0
    249           *         @arg M2S_GPIO_1: GPIO_1
    250           *         @arg M2S_GPIO_2: GPIO_2
    251           *         @arg M2S_GPIO_3: GPIO_3
    252           * @param  nPreemption Specifies Preemption Priority.
    253           * @param  nSubpriority Specifies Subgroup Priority.
    254           * @param  xNewState Specifies the State.
    255           *         This parameter can be one of following parameters:
    256           *         @arg 0: Interrupt is disabled
    257           *         @arg any value != 0: Interrupt is enabled
    258           * @retval None.
    259           */

   \                                 In section .text, align 4, keep-with-next
    260          void S2LP_Middleware_GpioInterruptCmd(M2SGpioPin xGpio, uint8_t nPreemption, uint8_t nSubpriority, uint8_t enable)
    261          {
   \                     S2LP_Middleware_GpioInterruptCmd: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    262            if (enable)  {
   \        0x2   0xBF00             Nop
   \        0x4   0x....             ADR.N    R4,s_vectcM2SGpioExtiIrqn
   \        0x6   0x5624             LDRSB    R4,[R4, R0]
   \        0x8   0x2B00             CMP      R3,#+0
   \        0xA   0xD006             BEQ      ??S2LP_Middleware_GpioInterruptCmd_0
    263              HAL_NVIC_SetPriority(s_vectcM2SGpioExtiIrqn[xGpio], nPreemption, nSubpriority);
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x....'....        BL       HAL_NVIC_SetPriority
    264              HAL_NVIC_EnableIRQ(s_vectcM2SGpioExtiIrqn[xGpio]);
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x....'....        BL       HAL_NVIC_EnableIRQ
   \       0x18   0xBD10             POP      {R4,PC}
    265            }
    266            else {
    267              HAL_NVIC_DisableIRQ(s_vectcM2SGpioExtiIrqn[xGpio]);
   \                     ??S2LP_Middleware_GpioInterruptCmd_0: (+1)
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0x....'....        BL       HAL_NVIC_DisableIRQ
    268            }
    269          }
   \       0x20   0xBD10             POP      {R4,PC}          ;; return
    270          
    271          /**
    272           * @brief  Enables or disables trigger on rising edge for that GPIO .
    273           * @param  xGpio Specifies the GPIO.
    274           *         This parameter can be one of following parameters:
    275           *         @arg M2S_GPIO_0: GPIO_0
    276           *         @arg M2S_GPIO_1: GPIO_1
    277           *         @arg M2S_GPIO_2: GPIO_2
    278           *         @arg M2S_GPIO_3: GPIO_3
    279           * @param  xNewState Specifies the State.
    280           *         This parameter can be one of following parameters:
    281           *         @arg 0: Rising trigger is disabled
    282           *         @arg any value != 0: Rising trigger is enabled
    283           * @retval None.
    284           */

   \                                 In section .text, align 4, keep-with-next
    285          void S2LP_Middleware_GpioTriggerRising(M2SGpioPin xGpio, uint8_t enable)
    286          {
    287            if(enable)
   \                     S2LP_Middleware_GpioTriggerRising: (+1)
   \        0x0   0x....             ADR.N    R2,s_vectnM2SGpioPin
   \        0x2   0x0040             LSLS     R0,R0,#+1
   \        0x4   0x5A10             LDRH     R0,[R2, R0]
   \        0x6   0x....             LDR      R2,??DataTable13_5  ;; 0x40010408
   \        0x8   0x....             B.N      ?Subroutine1
    288              EXTI->RTSR |= (uint16_t)s_vectnM2SGpioPin[xGpio];
    289            else
    290              EXTI->RTSR &= ~(uint16_t)s_vectnM2SGpioPin[xGpio];
    291          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x2900             CMP      R1,#+0
   \        0x2   0x6811             LDR      R1,[R2, #+0]
   \        0x4   0xD001             BEQ      ??Subroutine1_0
   \        0x6   0x4301             ORRS     R1,R1,R0
   \        0x8   0xE000             B        ??Subroutine1_1
   \                     ??Subroutine1_0: (+1)
   \        0xA   0x4381             BICS     R1,R1,R0
   \                     ??Subroutine1_1: (+1)
   \        0xC   0x6011             STR      R1,[R2, #+0]
   \        0xE   0x4770             BX       LR               ;; return
    292          
    293          /**
    294           * @brief  To assert if the rising edge IRQ is enabled for that GPIO .
    295           * @param  xGpio Specifies the GPIO.
    296           *         This parameter can be one of following parameters:
    297           *         @arg M2S_GPIO_0: GPIO_0
    298           *         @arg M2S_GPIO_1: GPIO_1
    299           *         @arg M2S_GPIO_2: GPIO_2
    300           *         @arg M2S_GPIO_3: GPIO_3
    301           * @retval  Specifies the State.
    302           *         @arg 0: Rising trigger is disabled
    303           *         @arg 1: Rising trigger is enabled
    304           */

   \                                 In section .text, align 2, keep-with-next
    305          uint8_t S2LP_Middleware_GetTriggerRising(M2SGpioPin xGpio)
    306          {
    307            if(EXTI->RTSR & (uint16_t)s_vectnM2SGpioPin[xGpio])
   \                     S2LP_Middleware_GetTriggerRising: (+1)
   \        0x0   0x....             LDR      R1,??DataTable13_5  ;; 0x40010408
   \        0x2   0x....             B.N      ?Subroutine0
    308              return 1;
    309          
    310            return 0;
    311          }

   \                                 In section .text, align 4, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x6809             LDR      R1,[R1, #+0]
   \        0x2   0xBF00             Nop
   \        0x4   0x....             ADR.N    R2,s_vectnM2SGpioPin
   \        0x6   0x0040             LSLS     R0,R0,#+1
   \        0x8   0x5A10             LDRH     R0,[R2, R0]
   \        0xA   0x4001             ANDS     R1,R1,R0
   \        0xC   0x0008             MOVS     R0,R1
   \        0xE   0xD000             BEQ      ??Subroutine0_0
   \       0x10   0x2001             MOVS     R0,#+1
   \                     ??Subroutine0_0: (+1)
   \       0x12   0xB2C0             UXTB     R0,R0
   \       0x14   0x4770             BX       LR               ;; return
    312          
    313          /**
    314           * @brief  Enables or disables trigger on falling edge for that GPIO .
    315           * @param  xGpio Specifies the GPIO.
    316           *         This parameter can be one of following parameters:
    317           *         @arg M2S_GPIO_0: GPIO_0
    318           *         @arg M2S_GPIO_1: GPIO_1
    319           *         @arg M2S_GPIO_2: GPIO_2
    320           *         @arg M2S_GPIO_3: GPIO_3
    321           * @param  xNewState Specifies the State.
    322           *         This parameter can be one of following parameters:
    323           *         @arg 0: Falling trigger is disabled
    324           *         @arg any value != 0: Falling trigger is enabled
    325           * @retval None.
    326           */

   \                                 In section .text, align 4, keep-with-next
    327          void S2LP_Middleware_GpioTriggerFalling(M2SGpioPin xGpio, uint8_t enable)
    328          {
    329            if(enable)
   \                     S2LP_Middleware_GpioTriggerFalling: (+1)
   \        0x0   0x....             ADR.N    R2,s_vectnM2SGpioPin
   \        0x2   0x0040             LSLS     R0,R0,#+1
   \        0x4   0x5A10             LDRH     R0,[R2, R0]
   \        0x6   0x....             LDR      R2,??DataTable13_6  ;; 0x4001040c
   \        0x8                      REQUIRE ?Subroutine1
   \        0x8                      ;; // Fall through to label ?Subroutine1
    330              EXTI->FTSR |= (uint16_t)s_vectnM2SGpioPin[xGpio];
    331            else
    332              EXTI->FTSR &= ~(uint16_t)s_vectnM2SGpioPin[xGpio];
    333          }
    334          
    335          /**
    336           * @brief  To assert if the falling edge IRQ is enabled for that GPIO .
    337           * @param  xGpio Specifies the GPIO.
    338           *         This parameter can be one of following parameters:
    339           *         @arg M2S_GPIO_0: GPIO_0
    340           *         @arg M2S_GPIO_1: GPIO_1
    341           *         @arg M2S_GPIO_2: GPIO_2
    342           *         @arg M2S_GPIO_3: GPIO_3
    343           * @retval  Specifies the State.
    344           *         @arg 0: Falling trigger is disabled
    345           *         @arg 1: Falling trigger is enabled
    346           */

   \                                 In section .text, align 4, keep-with-next
    347          uint8_t S2LP_Middleware_GpioGetTriggerFalling(M2SGpioPin xGpio)
    348          {
    349            if(EXTI->FTSR & (uint16_t)s_vectnM2SGpioPin[xGpio])
   \                     S2LP_Middleware_GpioGetTriggerFalling: (+1)
   \        0x0   0x....             LDR      R1,??DataTable13_6  ;; 0x4001040c
   \        0x2   0xBF00             Nop
   \        0x4                      REQUIRE ?Subroutine0
   \        0x4                      ;; // Fall through to label ?Subroutine0
    350              return 1;
    351          
    352            return 0;
    353          }
    354          
    355          /**
    356           * @brief  Returns the level of a specified GPIO.
    357           * @param  xGpio Specifies the GPIO to be read.
    358           *         This parameter can be one of following parameters:
    359           *         @arg M2S_GPIO_0: GPIO_0
    360           *         @arg M2S_GPIO_1: GPIO_1
    361           *         @arg M2S_GPIO_2: GPIO_2
    362           *         @arg M2S_GPIO_3: GPIO_3
    363           * @retval Level of the GPIO. This parameter can be:
    364           *         1 or 0.
    365           */

   \                                 In section .text, align 4, keep-with-next
    366          uint8_t S2LP_Middleware_GpioGetLevel(M2SGpioPin xGpio)
    367          {
   \                     S2LP_Middleware_GpioGetLevel: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    368            /* Gets the GPIO level */
    369            GPIO_PinState ret = HAL_GPIO_ReadPin(vectpxM2SGpioPort[xGpio], s_vectnM2SGpioPin[xGpio]);
    370          
    371            return ((ret==GPIO_PIN_SET) ? 1 : 0);
   \        0x2   0xBF00             Nop
   \        0x4   0x....             ADR.N    R1,s_vectnM2SGpioPin
   \        0x6   0x0042             LSLS     R2,R0,#+1
   \        0x8   0x5A89             LDRH     R1,[R1, R2]
   \        0xA   0x....             LDR      R2,??DataTable13_1
   \        0xC   0x0080             LSLS     R0,R0,#+2
   \        0xE   0x5810             LDR      R0,[R2, R0]
   \       0x10   0x....'....        BL       HAL_GPIO_ReadPin
   \       0x14   0x2801             CMP      R0,#+1
   \       0x16   0xD000             BEQ      ??S2LP_Middleware_GpioGetLevel_0
   \       0x18   0x2000             MOVS     R0,#+0
   \                     ??S2LP_Middleware_GpioGetLevel_0: (+1)
   \       0x1A   0xBD02             POP      {R1,PC}          ;; return
    372          }
    373          
    374          /**
    375           * @brief  Sets the level of a specified GPIO.
    376           * @param  xGpio Specifies the GPIO to be set.
    377           *         This parameter can be one of following parameters:
    378           *         @arg M2S_GPIO_0: GPIO_0
    379           *         @arg M2S_GPIO_1: GPIO_1
    380           *         @arg M2S_GPIO_2: GPIO_2
    381           *         @arg M2S_GPIO_3: GPIO_3
    382           *         @arg M2S_GPIO_SDN: SDN
    383           * @param  FlagStatus Level of the GPIO. This parameter can be:
    384           *         SET or RESET.
    385           * @retval None.
    386           */

   \                                 In section .text, align 4, keep-with-next
    387          void S2LP_Middleware_GpioSetLevel(M2SGpioPin xGpio, uint8_t level)
    388          {
   \                     S2LP_Middleware_GpioSetLevel: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    389            /* Sets the GPIO level */
    390            HAL_GPIO_WritePin(vectpxM2SGpioPort[xGpio], s_vectnM2SGpioPin[xGpio], (level == 0) ? GPIO_PIN_RESET: GPIO_PIN_SET);
   \        0x2   0x000A             MOVS     R2,R1
   \        0x4   0xD000             BEQ      ??S2LP_Middleware_GpioSetLevel_0
   \        0x6   0x2201             MOVS     R2,#+1
   \                     ??S2LP_Middleware_GpioSetLevel_0: (+1)
   \        0x8   0x....             ADR.N    R1,s_vectnM2SGpioPin
   \        0xA   0x0043             LSLS     R3,R0,#+1
   \        0xC   0x5AC9             LDRH     R1,[R1, R3]
   \        0xE   0x....             LDR      R3,??DataTable13_1
   \       0x10   0x0080             LSLS     R0,R0,#+2
   \       0x12   0x5818             LDR      R0,[R3, R0]
   \       0x14   0x....'....        BL       HAL_GPIO_WritePin
    391          }
   \       0x18   0xBD01             POP      {R0,PC}          ;; return
    392          
    393          /**
    394           * @brief  Gets the GPIO_PIN of the M2SGpioPin.
    395           * @param  xGpio: M2S GPIO.
    396           * @retval uint16_t GPIO_PIN value.
    397           */

   \                                 In section .text, align 4, keep-with-next
    398          uint32_t S2LP_Middleware_GpioGetPin(M2SGpioPin xGpio)
    399          {
    400            return s_vectnM2SGpioPin[xGpio];
   \                     S2LP_Middleware_GpioGetPin: (+1)
   \        0x0   0x....             ADR.N    R1,s_vectnM2SGpioPin
   \        0x2   0x0040             LSLS     R0,R0,#+1
   \        0x4   0x5A08             LDRH     R0,[R1, R0]
   \        0x6   0x4770             BX       LR               ;; return
    401          }
    402          

   \                                 In section .text, align 2, keep-with-next
    403          void S2LPShutdownInit(void)
    404          {
   \                     S2LPShutdownInit: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
    405            GPIO_InitTypeDef GPIO_InitStructure;
    406          
    407            S2LP_M2S_SDN_CLOCK();
   \        0x4   0x2001             MOVS     R0,#+1
   \        0x6   0x....             LDR      R1,??DataTable13  ;; 0x4002102c
   \        0x8   0x680A             LDR      R2,[R1, #+0]
   \        0xA   0x4302             ORRS     R2,R2,R0
   \        0xC   0x600A             STR      R2,[R1, #+0]
   \        0xE   0x6809             LDR      R1,[R1, #+0]
   \       0x10   0x4001             ANDS     R1,R1,R0
   \       0x12   0x9100             STR      R1,[SP, #+0]
   \       0x14   0x9900             LDR      R1,[SP, #+0]
    408          
    409            /* Configures MCU GPIO */
    410            GPIO_InitStructure.Pin   = S2LP_M2S_SDN_PIN;
   \       0x16   0x0205             LSLS     R5,R0,#+8
   \       0x18   0x9501             STR      R5,[SP, #+4]
    411            GPIO_InitStructure.Mode  = S2LP_M2S_SDN_MODE;
   \       0x1A   0x9002             STR      R0,[SP, #+8]
    412            GPIO_InitStructure.Pull  = S2LP_M2S_SDN_PUPD;
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0x9003             STR      R0,[SP, #+12]
    413            GPIO_InitStructure.Speed = S2LP_M2S_SDN_SPEED;
   \       0x20   0x2003             MOVS     R0,#+3
   \       0x22   0x9004             STR      R0,[SP, #+16]
    414          
    415            HAL_GPIO_Init(S2LP_M2S_SDN_PORT, &GPIO_InitStructure);
   \       0x24   0x24A0             MOVS     R4,#+160
   \       0x26   0x05E4             LSLS     R4,R4,#+23       ;; #+1342177280
   \       0x28   0xA901             ADD      R1,SP,#+4
   \       0x2A   0x0020             MOVS     R0,R4
   \       0x2C   0x....'....        BL       HAL_GPIO_Init
    416          
    417            S2LPShutdownEnter();
   \       0x30   0x2201             MOVS     R2,#+1
   \       0x32   0x0029             MOVS     R1,R5
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0x....'....        BL       HAL_GPIO_WritePin
    418          }
   \       0x3A   0xB007             ADD      SP,SP,#+28
   \       0x3C   0xBD30             POP      {R4,R5,PC}       ;; return
    419          

   \                                 In section .text, align 2, keep-with-next
    420          void S2LPShutdownEnter(void)
    421          {
   \                     S2LPShutdownEnter: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    422            /* Puts high the GPIO connected to shutdown pin */
    423            HAL_GPIO_WritePin(S2LP_M2S_SDN_PORT, S2LP_M2S_SDN_PIN, GPIO_PIN_SET);
   \        0x2   0x2201             MOVS     R2,#+1
   \        0x4   0x0211             LSLS     R1,R2,#+8
   \        0x6   0x20A0             MOVS     R0,#+160
   \        0x8   0x05C0             LSLS     R0,R0,#+23       ;; #+1342177280
   \        0xA   0x....'....        BL       HAL_GPIO_WritePin
    424          }
   \        0xE   0xBD01             POP      {R0,PC}          ;; return
    425          

   \                                 In section .text, align 2, keep-with-next
    426          void S2LPShutdownExit(void)
    427          {
   \                     S2LPShutdownExit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    428            /* Puts low the GPIO connected to shutdown pin */
    429            HAL_GPIO_WritePin(S2LP_M2S_SDN_PORT, S2LP_M2S_SDN_PIN, GPIO_PIN_RESET);
   \        0x2   0x2200             MOVS     R2,#+0
   \        0x4   0x2180             MOVS     R1,#+128
   \        0x6   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \        0x8   0x20A0             MOVS     R0,#+160
   \        0xA   0x05C0             LSLS     R0,R0,#+23       ;; #+1342177280
   \        0xC   0x....'....        BL       HAL_GPIO_WritePin
    430          
    431            /* Delay to allow the circuit POR, about 700 us */
    432            for(volatile uint32_t i=0;i<0x1E00;i++);
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0x21F0             MOVS     R1,#+240
   \       0x16   0x0149             LSLS     R1,R1,#+5        ;; #+7680
   \       0x18   0xE002             B        ??S2LPShutdownExit_0
   \                     ??S2LPShutdownExit_1: (+1)
   \       0x1A   0x9800             LDR      R0,[SP, #+0]
   \       0x1C   0x1C40             ADDS     R0,R0,#+1
   \       0x1E   0x9000             STR      R0,[SP, #+0]
   \                     ??S2LPShutdownExit_0: (+1)
   \       0x20   0x9800             LDR      R0,[SP, #+0]
   \       0x22   0x4288             CMP      R0,R1
   \       0x24   0xD3F9             BCC      ??S2LPShutdownExit_1
    433          }
   \       0x26   0xBD01             POP      {R0,PC}          ;; return
    434          

   \                                 In section .text, align 2, keep-with-next
    435          uint8_t S2LPShutdownCheck(void)
    436          {
   \                     S2LPShutdownCheck: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    437            /* Gets the GPIO level */
    438            return (uint8_t)HAL_GPIO_ReadPin(S2LP_M2S_SDN_PORT, S2LP_M2S_SDN_PIN);
   \        0x2   0x2180             MOVS     R1,#+128
   \        0x4   0x0049             LSLS     R1,R1,#+1        ;; #+256
   \        0x6   0x20A0             MOVS     R0,#+160
   \        0x8   0x05C0             LSLS     R0,R0,#+23       ;; #+1342177280
   \        0xA   0x....'....        BL       HAL_GPIO_ReadPin
   \        0xE   0xBD02             POP      {R1,PC}          ;; return
    439          }
    440          

   \                                 In section .text, align 2, keep-with-next
    441          void S2LPIRQInit(void)
    442          {
   \                     S2LPIRQInit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    443            S2LP_Middleware_GpioInit((M2SGpioPin)S2LP_GPIO_IRQ_PIN, M2S_MODE_EXTI_IN);
   \        0x2   0x2101             MOVS     R1,#+1
   \        0x4   0x2003             MOVS     R0,#+3
   \        0x6   0x....'....        BL       S2LP_Middleware_GpioInit
    444          }
   \        0xA   0xBD01             POP      {R0,PC}          ;; return
    445          

   \                                 In section .text, align 2, keep-with-next
    446          void S2LPIRQEnable(uint8_t state, uint8_t edge_direction)
    447          {
   \                     S2LPIRQEnable: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    448            S2LP_Middleware_GpioInit((M2SGpioPin)S2LP_GPIO_IRQ_PIN, M2S_MODE_EXTI_IN);
   \        0x6   0x2101             MOVS     R1,#+1
   \        0x8   0x2003             MOVS     R0,#+3
   \        0xA   0x....'....        BL       S2LP_Middleware_GpioInit
    449            S2LP_Middleware_GpioTriggerRising((M2SGpioPin)S2LP_GPIO_IRQ_PIN, edge_direction);
   \        0xE   0x0029             MOVS     R1,R5
   \       0x10   0x2003             MOVS     R0,#+3
   \       0x12   0x....'....        BL       S2LP_Middleware_GpioTriggerRising
    450            S2LP_Middleware_GpioInterruptCmd((M2SGpioPin)S2LP_GPIO_IRQ_PIN, 0x00, 0x00, state);
   \       0x16   0x0023             MOVS     R3,R4
   \       0x18   0x....             B.N      ?Subroutine2
    451          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x2003             MOVS     R0,#+3
   \        0x6   0x....'....        BL       S2LP_Middleware_GpioInterruptCmd
   \        0xA   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    452          

   \                                 In section .text, align 2, keep-with-next
    453          void S2LPIRQEnableEx(uint8_t state, uint8_t edge_direction)
    454          {
   \                     S2LPIRQEnableEx: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0005             MOVS     R5,R0
   \        0x4   0x000C             MOVS     R4,R1
    455            S2LP_Middleware_GpioInitEx((M2SGpioPin)S2LP_GPIO_IRQ_PIN, M2S_MODE_EXTI_IN, edge_direction);
   \        0x6   0x0022             MOVS     R2,R4
   \        0x8   0x2101             MOVS     R1,#+1
   \        0xA   0x2003             MOVS     R0,#+3
   \        0xC   0x....'....        BL       S2LP_Middleware_GpioInitEx
    456          
    457            S2LP_Middleware_GpioTriggerRising((M2SGpioPin)S2LP_GPIO_IRQ_PIN, edge_direction);
   \       0x10   0x0021             MOVS     R1,R4
   \       0x12   0x2003             MOVS     R0,#+3
   \       0x14   0x....'....        BL       S2LP_Middleware_GpioTriggerRising
    458            S2LP_Middleware_GpioTriggerFalling((M2SGpioPin)S2LP_GPIO_IRQ_PIN, !edge_direction);
   \       0x18   0x1E61             SUBS     R1,R4,#+1
   \       0x1A   0x4189             SBCS     R1,R1,R1
   \       0x1C   0x0FC9             LSRS     R1,R1,#+31
   \       0x1E   0x2003             MOVS     R0,#+3
   \       0x20   0x....'....        BL       S2LP_Middleware_GpioTriggerFalling
    459          
    460            S2LP_Middleware_GpioInterruptCmd((M2SGpioPin)S2LP_GPIO_IRQ_PIN, 0x00, 0x00, state);
   \       0x24   0x002B             MOVS     R3,R5
   \       0x26                      REQUIRE ?Subroutine2
   \       0x26                      ;; // Fall through to label ?Subroutine2
    461          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \        0x0   0x4002'102C        DC32     0x4002102c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \        0x0   0x....'....        DC32     vectpxM2SGpioPort

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \        0x0   0x4001'0414        DC32     0x40010414

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \        0x0   0x1011'0000        DC32     0x10110000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \        0x0   0x1021'0000        DC32     0x10210000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \        0x0   0x4001'0408        DC32     0x40010408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \        0x0   0x4001'040C        DC32     0x4001040c
    462          
    463          /**
    464           * @}
    465           */
    466          
    467          /**
    468           * @}
    469           */
    470          
    471          /**
    472           * @}
    473           */
    474          
    475          
    476          /******************* (C) COPYRIGHT 2020 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   S2LPIRQEnable
        16   -> S2LP_Middleware_GpioInit
        16   -> S2LP_Middleware_GpioInterruptCmd
        16   -> S2LP_Middleware_GpioTriggerRising
      16   S2LPIRQEnableEx
        16   -> S2LP_Middleware_GpioInitEx
        16   -> S2LP_Middleware_GpioInterruptCmd
        16   -> S2LP_Middleware_GpioTriggerFalling
        16   -> S2LP_Middleware_GpioTriggerRising
       8   S2LPIRQInit
         8   -> S2LP_Middleware_GpioInit
       8   S2LPShutdownCheck
         8   -> HAL_GPIO_ReadPin
       8   S2LPShutdownEnter
         8   -> HAL_GPIO_WritePin
       8   S2LPShutdownExit
         8   -> HAL_GPIO_WritePin
      40   S2LPShutdownInit
        40   -> HAL_GPIO_Init
        40   -> HAL_GPIO_WritePin
       0   S2LP_Middleware_GetTriggerRising
       8   S2LP_Middleware_GpioGetLevel
         8   -> HAL_GPIO_ReadPin
       0   S2LP_Middleware_GpioGetPin
       0   S2LP_Middleware_GpioGetTriggerFalling
      40   S2LP_Middleware_GpioInit
        40   -> HAL_GPIO_Init
      40   S2LP_Middleware_GpioInitEx
        40   -> HAL_GPIO_Init
       8   S2LP_Middleware_GpioInterruptCmd
         8   -> HAL_NVIC_DisableIRQ
         8   -> HAL_NVIC_EnableIRQ
         8   -> HAL_NVIC_SetPriority
       8   S2LP_Middleware_GpioSetLevel
         8   -> HAL_GPIO_WritePin
       0   S2LP_Middleware_GpioTriggerFalling
       0   S2LP_Middleware_GpioTriggerRising


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
      22  ?Subroutine0
      16  ?Subroutine1
      12  ?Subroutine2
      26  S2LPIRQEnable
      38  S2LPIRQEnableEx
      12  S2LPIRQInit
      16  S2LPShutdownCheck
      16  S2LPShutdownEnter
      40  S2LPShutdownExit
      62  S2LPShutdownInit
       4  S2LP_Middleware_GetTriggerRising
      28  S2LP_Middleware_GpioGetLevel
       8  S2LP_Middleware_GpioGetPin
       4  S2LP_Middleware_GpioGetTriggerFalling
     132  S2LP_Middleware_GpioInit
     136  S2LP_Middleware_GpioInitEx
      34  S2LP_Middleware_GpioInterruptCmd
      26  S2LP_Middleware_GpioSetLevel
       8  S2LP_Middleware_GpioTriggerFalling
      10  S2LP_Middleware_GpioTriggerRising
       4  s_vectcM2SGpioExtiIrqn
       8  s_vectnM2SGpioPin
      16  s_vectxM2SGpioPuPd
      16  s_vectxM2SGpioSpeed
      16  s_vectxM2sGpioExtiMode
      16  vectpxM2SGpioPort

 
  16 bytes in section .data
 738 bytes in section .text
 
 738 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: none
