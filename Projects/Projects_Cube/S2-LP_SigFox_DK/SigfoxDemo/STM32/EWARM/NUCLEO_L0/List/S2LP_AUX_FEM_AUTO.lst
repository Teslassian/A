###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         12/Jan/2021  12:25:15
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Drivers\S2LP_Middleware\STM32\src\FEM\S2LP_AUX_FEM_AUTO.c
#    Command line             =
#        -f C:\Users\dvone\AppData\Local\Temp\EW4E38.tmp
#        (C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Drivers\S2LP_Middleware\STM32\src\FEM\S2LP_AUX_FEM_AUTO.c
#        -D USE_STM32L0XX_NUCLEO -D USE_HAL_DRIVER -D USE_SYSTICK_DELAY -D
#        STM32L053xx -lC
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\List
#        -o
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\Obj
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\Sigfox_Libs\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\ST_API\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\BSP\SDK_Eval_STM32\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\MCU\STM32_HAL\STM32L0xx_HAL_Driver\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\MCU\CMSIS\STM32L0xx\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\S2LP_Middleware\STM32\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\Utils\STM32\inc\\
#        -Ohz --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.4\arm\CMSIS\Core\Include\\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.4\arm\CMSIS\DSP\Include\\")
#    Locale                   =  C
#    List file                =
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\List\S2LP_AUX_FEM_AUTO.lst
#    Object file              =
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\Obj\S2LP_AUX_FEM_AUTO.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#
###############################################################################

C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Drivers\S2LP_Middleware\STM32\src\FEM\S2LP_AUX_FEM_AUTO.c
      1          /**
      2          * @file    S2LP_AUX_FEM_AUTO.c
      3          * @author  LowPower RF BU - AMG
      4          * @version 2.0.0
      5          * @date    March, 2020
      6          * @brief   Platform dependent file for external front end module (aka power amplifier)
      7          *          management. This file is only useful for ST eval kits.
      8          *          The evaluation kit supported are: STEVAL-FKI868V2 and STEVAL-FKI915V1
      9          * @details
     10          *
     11          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13          * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14          * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15          * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16          * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17          *
     18          * THIS SOURCE CODE IS PROTECTED BY A LICENSE.
     19          * FOR MORE INFORMATION PLEASE CAREFULLY READ THE LICENSE AGREEMENT FILE LOCATED
     20          * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     21          *
     22          * <h2><center>&copy; COPYRIGHT 2020 STMicroelectronics</center></h2>
     23          */
     24          
     25          /* Includes ------------------------------------------------------------------*/
     26          #include "S2LP_Middleware_Config.h"
     27          #include "S2LP_CORE_SPI.h"
     28          #include "S2LP_AUX_FEM.h"
     29          #include "S2LP_AUX_UTILS.h"
     30          
     31          /** @addtogroup S2LP_MIDDLEWARE_STM32                     S2LP Middleware - STM32
     32          * @{
     33          */
     34          
     35          /** @defgroup S2LP_AUX_FEM_AUTO						S2LP AUX FEM AUTO
     36            * @brief  S2-LP FEM handling module.
     37            * This module exports all the main operations to deal with FEM.
     38            * @details See the file <i>@ref S2LP_FEM.h</i> for more details.
     39            * @{
     40          */
     41          
     42          /**
     43          * In order to correctly configure the PA there's need to set the PA Level
     44          * in terms of dBM and the MaxIndex for ramping.
     45          * You can define this functions in your own library
     46          * or include ST's S2LP Library that defines this functions in S2LP_Radio.c
     47          */

   \                                 In section .text, align 2
     48          __weak void S2LPRadioSetPALeveldBm(uint8_t cIndex, int32_t wPowerdBm){};
   \                     S2LPRadioSetPALeveldBm: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
     49          __weak void S2LPRadioSetPALevelMaxIndex(uint8_t cIndex){};
   \                     S2LPRadioSetPALevelMaxIndex: (+1)
   \        0x0   0x4770             BX       LR               ;; return
     50          
     51          #define PA_CSD_PIN				GPIO_PIN_0
     52          #define PA_CSD_PORT				GPIOA
     53          #define PA_CSD_GPIO_CLK				__GPIOA_CLK_ENABLE
     54          
     55          #define PA_CPS_PIN				GPIO_PIN_4
     56          #define PA_CPS_PORT				GPIOA
     57          #define PA_CPS_GPIO_CLK				__GPIOA_CLK_ENABLE
     58          
     59          #define PA_CTX_PIN				GPIO_PIN_0
     60          #define PA_CTX_PORT				GPIOB
     61          #define PA_CTX_GPIO_CLK				__GPIOB_CLK_ENABLE
     62          

   \                                 In section .bss, align 1
     63          static uint8_t _isBypassEnabled = 0;
   \                     _isBypassEnabled:
   \        0x0                      DS8 1
     64          
     65          
     66          /** @defgroup S2LP_AUX_FEM_AUTO_Functions			S2LP AUX FEM Auto exported functions
     67          * @{
     68          */
     69          
     70          
     71          /**
     72          * @brief  Front End Module initialization function.
     73          * This function automatically sets the FEM according to the information stored in the device EEPROM.
     74          * This function can be redefined for special needs.
     75          * @param  None
     76          * @retval None
     77          */

   \                                 In section .text, align 4
     78          __weak void FEM_Init()
     79          {
   \                     FEM_Init: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
     80            RangeExtType femType = S2LPManagementGetRangeExtender();
   \        0x4   0x....'....        BL       S2LPManagementGetRangeExtender
     81          
     82            if(femType == RANGE_EXT_NONE)
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD042             BEQ      ??FEM_Init_1
     83            {
     84              /* ... */
     85            }
     86            else if(femType == RANGE_EXT_SKYWORKS_SE2435L)
   \        0xC   0x2802             CMP      R0,#+2
   \        0xE   0xD109             BNE      ??FEM_Init_2
     87            {
     88              /* Configuration of S2LP GPIO to control external PA signal CSD, CPS, CTX */
     89              uint8_t tmp[]={
     90          	(uint8_t)S2LP_GPIO_DIG_OUT_TX_RX_MODE | (uint8_t)S2LP_GPIO_MODE_DIGITAL_OUTPUT_LP,
     91          	(uint8_t)S2LP_GPIO_DIG_OUT_RX_STATE   | (uint8_t)S2LP_GPIO_MODE_DIGITAL_OUTPUT_LP,
     92          	(uint8_t)S2LP_GPIO_DIG_OUT_TX_STATE   | (uint8_t)S2LP_GPIO_MODE_DIGITAL_OUTPUT_LP
     93              };
   \       0x10   0x4668             MOV      R0,SP
   \       0x12   0x4921             LDR      R1,??FEM_Init_0
   \       0x14   0x680A             LDR      R2,[R1, #0]
   \       0x16   0x6002             STR      R2,[R0, #0]
     94          
     95              S2LPSpiWriteRegisters(0x00, sizeof(tmp), tmp);
   \       0x18   0x466A             MOV      R2,SP
   \       0x1A   0x2103             MOVS     R1,#+3
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0x....'....        BL       S2LPSpiWriteRegisters
   \       0x22   0xE036             B        ??FEM_Init_1
     96            }
     97            else if(femType == RANGE_EXT_SKYWORKS_SKY66420)
   \                     ??FEM_Init_2: (+1)
   \       0x24   0x2803             CMP      R0,#+3
   \       0x26   0xD134             BNE      ??FEM_Init_1
     98            {
     99              /* Configures MCU GPIOs to drive external PA */
    100              GPIO_InitTypeDef GPIO_InitStructure;
    101          
    102              /*CSD*/
    103              PA_CSD_GPIO_CLK();
   \       0x28   0x2401             MOVS     R4,#+1
   \       0x2A   0x4D1C             LDR      R5,??FEM_Init_0+0x4  ;; 0x4002102c
   \       0x2C   0x6828             LDR      R0,[R5, #+0]
   \       0x2E   0x4320             ORRS     R0,R0,R4
   \       0x30   0x6028             STR      R0,[R5, #+0]
   \       0x32   0x6828             LDR      R0,[R5, #+0]
   \       0x34   0x4020             ANDS     R0,R0,R4
   \       0x36   0x9005             STR      R0,[SP, #+20]
   \       0x38   0x9805             LDR      R0,[SP, #+20]
    104              GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
   \       0x3A   0x9401             STR      R4,[SP, #+4]
    105              GPIO_InitStructure.Pull = GPIO_NOPULL;
   \       0x3C   0x2700             MOVS     R7,#+0
   \       0x3E   0x9702             STR      R7,[SP, #+8]
    106              GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
   \       0x40   0x2603             MOVS     R6,#+3
   \       0x42   0x9603             STR      R6,[SP, #+12]
    107              GPIO_InitStructure.Pin = PA_CSD_PIN;
   \       0x44   0x9400             STR      R4,[SP, #+0]
    108              HAL_GPIO_Init(PA_CSD_PORT, &GPIO_InitStructure);
   \       0x46   0x4669             MOV      R1,SP
   \       0x48   0x20A0             MOVS     R0,#+160
   \       0x4A   0x05C0             LSLS     R0,R0,#+23       ;; #+1342177280
   \       0x4C   0x....'....        BL       HAL_GPIO_Init
    109          
    110              /*CPS*/
    111              PA_CPS_GPIO_CLK();
   \       0x50   0x6828             LDR      R0,[R5, #+0]
   \       0x52   0x4320             ORRS     R0,R0,R4
   \       0x54   0x6028             STR      R0,[R5, #+0]
   \       0x56   0x6828             LDR      R0,[R5, #+0]
   \       0x58   0x4020             ANDS     R0,R0,R4
   \       0x5A   0x9005             STR      R0,[SP, #+20]
   \       0x5C   0x9805             LDR      R0,[SP, #+20]
    112              GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
   \       0x5E   0x9401             STR      R4,[SP, #+4]
    113              GPIO_InitStructure.Pull = GPIO_NOPULL;
   \       0x60   0x9702             STR      R7,[SP, #+8]
    114              GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
   \       0x62   0x9603             STR      R6,[SP, #+12]
    115              GPIO_InitStructure.Pin = PA_CPS_PIN;
   \       0x64   0x2010             MOVS     R0,#+16
   \       0x66   0x9000             STR      R0,[SP, #+0]
    116              HAL_GPIO_Init(PA_CPS_PORT, &GPIO_InitStructure);
   \       0x68   0x4669             MOV      R1,SP
   \       0x6A   0x20A0             MOVS     R0,#+160
   \       0x6C   0x05C0             LSLS     R0,R0,#+23       ;; #+1342177280
   \       0x6E   0x....'....        BL       HAL_GPIO_Init
    117          
    118              /*CTX*/
    119              PA_CTX_GPIO_CLK();
   \       0x72   0x2002             MOVS     R0,#+2
   \       0x74   0x6829             LDR      R1,[R5, #+0]
   \       0x76   0x4301             ORRS     R1,R1,R0
   \       0x78   0x6029             STR      R1,[R5, #+0]
   \       0x7A   0x6829             LDR      R1,[R5, #+0]
   \       0x7C   0x4008             ANDS     R0,R0,R1
   \       0x7E   0x9005             STR      R0,[SP, #+20]
   \       0x80   0x9805             LDR      R0,[SP, #+20]
    120              GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
   \       0x82   0x9401             STR      R4,[SP, #+4]
    121              GPIO_InitStructure.Pull = GPIO_NOPULL;
   \       0x84   0x9702             STR      R7,[SP, #+8]
    122              GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
   \       0x86   0x9603             STR      R6,[SP, #+12]
    123              GPIO_InitStructure.Pin = PA_CTX_PIN;
   \       0x88   0x9400             STR      R4,[SP, #+0]
    124              HAL_GPIO_Init(PA_CTX_PORT, &GPIO_InitStructure);
   \       0x8A   0x4669             MOV      R1,SP
   \       0x8C   0x4804             LDR      R0,??FEM_Init_0+0x8  ;; 0x50000400
   \       0x8E   0x....'....        BL       HAL_GPIO_Init
    125            }
    126          }
   \                     ??FEM_Init_1: (+1)
   \       0x92   0xB007             ADD      SP,SP,#+28
   \       0x94   0xBDF0             POP      {R4-R7,PC}       ;; return
   \       0x96   0xBF00             Nop
   \                     ??FEM_Init_0:
   \       0x98   0x....'....        DC32     ?_0
   \       0x9C   0x4002'102C        DC32     0x4002102c
   \       0xA0   0x5000'0400        DC32     0x50000400
    127          
    128          /**
    129          * @brief  Front End Module Operation function.
    130          * This function configures the PA according to the desired status.
    131          * This function can be redefined for special needs.
    132          * @param  operation Specifies the operation to perform.
    133          *         This parameter can be one of following parameters:
    134          *         @arg FEM_SHUTDOWN: Shutdown PA
    135          *         @arg FEM_TX_BYPASS: Bypass the PA in TX
    136          *         @arg FEM_TX: TX mode
    137          *         @arg FEM_RX: RX mode
    138          * @retval None
    139          */

   \                                 In section .text, align 4
    140          __weak void FEM_Operation(FEM_OperationType operation)
    141          {
   \                     FEM_Operation: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0007             MOVS     R7,R0
    142            RangeExtType femType = S2LPManagementGetRangeExtender();
   \        0x4   0x....'....        BL       S2LPManagementGetRangeExtender
   \        0x8   0x0006             MOVS     R6,R0
    143          
    144            FEM_Init();
   \        0xA   0x....'....        BL       FEM_Init
    145          
    146            switch (operation)
   \        0xE   0x4D22             LDR      R5,??FEM_Operation_0  ;; 0x50000400
   \       0x10   0x24A0             MOVS     R4,#+160
   \       0x12   0x05E4             LSLS     R4,R4,#+23       ;; #+1342177280
   \       0x14   0x2F00             CMP      R7,#+0
   \       0x16   0xD005             BEQ      ??FEM_Operation_1
   \       0x18   0x2F02             CMP      R7,#+2
   \       0x1A   0xD019             BEQ      ??FEM_Operation_2
   \       0x1C   0xD30B             BCC      ??FEM_Operation_3
   \       0x1E   0x2F03             CMP      R7,#+3
   \       0x20   0xD028             BEQ      ??FEM_Operation_4
   \       0x22   0xBDF1             POP      {R0,R4-R7,PC}
    147            {
    148            case FEM_SHUTDOWN:
    149              {
    150          	if(femType == RANGE_EXT_SKYWORKS_SKY66420)
   \                     ??FEM_Operation_1: (+1)
   \       0x24   0x2E03             CMP      R6,#+3
   \       0x26   0xD136             BNE      ??FEM_Operation_5
    151          	{
    152          	  /* Puts CSD high to turn on PA */
    153          	  HAL_GPIO_WritePin(PA_CSD_PORT, PA_CSD_PIN, GPIO_PIN_RESET);
   \       0x28   0x2200             MOVS     R2,#+0
   \       0x2A   0x2101             MOVS     R1,#+1
   \       0x2C   0x0020             MOVS     R0,R4
   \       0x2E   0x....'....        BL       HAL_GPIO_WritePin
    154          
    155          	  /* Puts CTX high to go in TX state DON'T CARE */
    156          	  HAL_GPIO_WritePin(PA_CTX_PORT, PA_CTX_PIN, GPIO_PIN_SET);
   \       0x32   0x2201             MOVS     R2,#+1
   \       0x34   0xE026             B        ??FEM_Operation_6
    157          
    158          	  /*No Bypass mode select DON'T CARE  */
    159          	  HAL_GPIO_WritePin(PA_CPS_PORT, PA_CPS_PIN, GPIO_PIN_SET);
    160          	}
    161          
    162          	break;
    163              }
    164            case FEM_TX_BYPASS:
    165              {
    166          	if(femType == RANGE_EXT_SKYWORKS_SKY66420)
   \                     ??FEM_Operation_3: (+1)
   \       0x36   0x2E03             CMP      R6,#+3
   \       0x38   0xD12D             BNE      ??FEM_Operation_5
    167          	{
    168          	  /* Puts CSD high to turn on PA */
    169          	  HAL_GPIO_WritePin(PA_CSD_PORT, PA_CSD_PIN, GPIO_PIN_SET);
   \       0x3A   0x2201             MOVS     R2,#+1
   \       0x3C   0x2101             MOVS     R1,#+1
   \       0x3E   0x0020             MOVS     R0,R4
   \       0x40   0x....'....        BL       HAL_GPIO_WritePin
    170          
    171          	  /* Puts CTX high to go in TX state */
    172          	  HAL_GPIO_WritePin(PA_CTX_PORT, PA_CTX_PIN, GPIO_PIN_SET);
   \       0x44   0x2201             MOVS     R2,#+1
   \       0x46   0x2101             MOVS     R1,#+1
   \       0x48   0x0028             MOVS     R0,R5
   \       0x4A   0x....'....        BL       HAL_GPIO_WritePin
    173          
    174          	  /*Bypass mode select  */
    175          	  HAL_GPIO_WritePin(PA_CPS_PORT, PA_CPS_PIN, GPIO_PIN_RESET);
   \       0x4E   0xE00F             B.N      ??FEM_Operation_7
    176          	}
    177          
    178          	break;
    179              }
    180            case FEM_TX:
    181              {
    182          	if(femType == RANGE_EXT_SKYWORKS_SKY66420)
   \                     ??FEM_Operation_2: (+1)
   \       0x50   0x2E03             CMP      R6,#+3
   \       0x52   0xD120             BNE      ??FEM_Operation_5
    183          	{
    184          	  /* Puts CSD high to turn on PA */
    185          	  HAL_GPIO_WritePin(PA_CSD_PORT, PA_CSD_PIN, GPIO_PIN_SET);
   \       0x54   0x2201             MOVS     R2,#+1
   \       0x56   0x2101             MOVS     R1,#+1
   \       0x58   0x0020             MOVS     R0,R4
   \       0x5A   0x....'....        BL       HAL_GPIO_WritePin
    186          
    187          	  /* Puts CTX high to go in TX state */
    188          	  HAL_GPIO_WritePin(PA_CTX_PORT, PA_CTX_PIN, GPIO_PIN_SET);
   \       0x5E   0x2201             MOVS     R2,#+1
   \       0x60   0x2101             MOVS     R1,#+1
   \       0x62   0x0028             MOVS     R0,R5
   \       0x64   0x....'....        BL       HAL_GPIO_WritePin
    189          
    190          	  /* Check Bypass mode */
    191          	  if (FEM_GetBypass())
   \       0x68   0x480C             LDR      R0,??FEM_Operation_0+0x4
   \       0x6A   0x7800             LDRB     R0,[R0, #+0]
   \       0x6C   0x2800             CMP      R0,#+0
   \       0x6E   0xD00D             BEQ      ??FEM_Operation_8
    192          	    HAL_GPIO_WritePin(PA_CPS_PORT, PA_CPS_PIN, GPIO_PIN_RESET);
   \                     ??FEM_Operation_7: (+1)
   \       0x70   0x2200             MOVS     R2,#+0
   \       0x72   0xE00C             B        ??FEM_Operation_9
    193          	  else
    194          	    HAL_GPIO_WritePin(PA_CPS_PORT, PA_CPS_PIN, GPIO_PIN_SET);
    195          	}
    196          
    197          	break;
    198              }
    199            case FEM_RX:
    200              {
    201          	if(femType == RANGE_EXT_SKYWORKS_SKY66420)
   \                     ??FEM_Operation_4: (+1)
   \       0x74   0x2E03             CMP      R6,#+3
   \       0x76   0xD10E             BNE      ??FEM_Operation_5
    202          	{
    203          	  /* Puts CSD high to turn on PA */
    204          	  HAL_GPIO_WritePin(PA_CSD_PORT, PA_CSD_PIN, GPIO_PIN_SET);
   \       0x78   0x2201             MOVS     R2,#+1
   \       0x7A   0x2101             MOVS     R1,#+1
   \       0x7C   0x0020             MOVS     R0,R4
   \       0x7E   0x....'....        BL       HAL_GPIO_WritePin
    205          
    206          	  /* Puts CTX low */
    207          	  HAL_GPIO_WritePin(PA_CTX_PORT, PA_CTX_PIN, GPIO_PIN_RESET);
   \       0x82   0x2200             MOVS     R2,#+0
   \                     ??FEM_Operation_6: (+1)
   \       0x84   0x2101             MOVS     R1,#+1
   \       0x86   0x0028             MOVS     R0,R5
   \       0x88   0x....'....        BL       HAL_GPIO_WritePin
    208          
    209          	  /*No Bypass mode select DON'T CARE  */
    210          	  HAL_GPIO_WritePin(PA_CPS_PORT, PA_CPS_PIN, GPIO_PIN_SET);
   \                     ??FEM_Operation_8: (+1)
   \       0x8C   0x2201             MOVS     R2,#+1
   \                     ??FEM_Operation_9: (+1)
   \       0x8E   0x2110             MOVS     R1,#+16
   \       0x90   0x0020             MOVS     R0,R4
   \       0x92   0x....'....        BL       HAL_GPIO_WritePin
    211          	}
    212          
    213          	break;
    214              }
    215            default:
    216              /* Error */
    217              break;
    218            }
    219          }
   \                     ??FEM_Operation_5: (+1)
   \       0x96   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   \                     ??FEM_Operation_0:
   \       0x98   0x5000'0400        DC32     0x50000400
   \       0x9C   0x....'....        DC32     _isBypassEnabled
    220          
    221          /*
    222          * @brief Set the FEM in Bypass (if bypass mode is available)
    223          * This function configures the FEM in Bypass Mode,
    224          * whereas the Bypass mode is available
    225          * @param the Bypass flag (1 means "set Bypass")
    226          * @retval None
    227          */

   \                                 In section .text, align 2, keep-with-next
    228          void FEM_SetBypass(uint8_t bypass_mode)
    229          {
    230            _isBypassEnabled = bypass_mode;
   \                     FEM_SetBypass: (+1)
   \        0x0   0x....             LDR      R1,??DataTable2
   \        0x2   0x7008             STRB     R0,[R1, #+0]
    231          }
   \        0x4   0x4770             BX       LR               ;; return
    232          
    233          /*
    234          * @brief Get the FEM Bypass Mode
    235          * This function returns 1 if the FEM is in Bypass Mode
    236          * @param None
    237          * @retval the Bypass state
    238          */

   \                                 In section .text, align 2, keep-with-next
    239          uint8_t FEM_GetBypass()
    240          {
    241            return _isBypassEnabled;
   \                     FEM_GetBypass: (+1)
   \        0x0   0x....             LDR      R0,??DataTable2
   \        0x2   0x7800             LDRB     R0,[R0, #+0]
   \        0x4   0x4770             BX       LR               ;; return
    242          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x....'....        DC32     _isBypassEnabled

   \                                 In section .rodata, align 4, keep-with-next
   \                     ?_0:
   \        0x0   0x92 0x52          DC8 146, 82, 42

   \              0x2A
   \        0x3                      DS8 1
    243          
    244          /**
    245          * @}
    246          */
    247          
    248          /**
    249          * @}
    250          */
    251          
    252          /**
    253          * @}
    254          */
    255          
    256          
    257          /******************* (C) COPYRIGHT 2020 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   FEM_GetBypass
      48   FEM_Init
        48   -> HAL_GPIO_Init
        48   -> S2LPManagementGetRangeExtender
        48   -> S2LPSpiWriteRegisters
      24   FEM_Operation
        24   -> FEM_Init
        24   -> HAL_GPIO_WritePin
        24   -> S2LPManagementGetRangeExtender
       0   FEM_SetBypass
       0   S2LPRadioSetPALevelMaxIndex
       0   S2LPRadioSetPALeveldBm


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ?_0
       6  FEM_GetBypass
     164  FEM_Init
     160  FEM_Operation
       6  FEM_SetBypass
       2  S2LPRadioSetPALevelMaxIndex
       2  S2LPRadioSetPALeveldBm
       1  _isBypassEnabled

 
   1 byte  in section .bss
   4 bytes in section .rodata
 344 bytes in section .text
 
 16 bytes of CODE  memory (+ 328 bytes shared)
  4 bytes of CONST memory
  1 byte  of DATA  memory

Errors: none
Warnings: none
