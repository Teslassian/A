###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         12/Jan/2021  12:25:42
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Drivers\MCU\CMSIS\STM32L0xx\src\system_stm32l0xx.c
#    Command line             =
#        -f C:\Users\dvone\AppData\Local\Temp\EWB22D.tmp
#        (C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Drivers\MCU\CMSIS\STM32L0xx\src\system_stm32l0xx.c
#        -D USE_STM32L0XX_NUCLEO -D USE_HAL_DRIVER -D USE_SYSTICK_DELAY -D
#        STM32L053xx -lC
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\List
#        -o
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\Obj
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\Sigfox_Libs\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\ST_API\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\BSP\SDK_Eval_STM32\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\MCU\STM32_HAL\STM32L0xx_HAL_Driver\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\MCU\CMSIS\STM32L0xx\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\S2LP_Middleware\STM32\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\Utils\STM32\inc\\
#        -Ohz --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.4\arm\CMSIS\Core\Include\\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.4\arm\CMSIS\DSP\Include\\")
#    Locale                   =  C
#    List file                =
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\List\system_stm32l0xx.lst
#    Object file              =
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\Obj\system_stm32l0xx.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#
###############################################################################

C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Drivers\MCU\CMSIS\STM32L0xx\src\system_stm32l0xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32l0xx.c
      4            * @author  MCD Application Team
      5            * @brief   CMSIS Cortex-M0+ Device Peripheral Access Layer System Source File.
      6            *
      7            *   This file provides two functions and one global variable to be called from
      8            *   user application:
      9            *      - SystemInit(): This function is called at startup just after reset and
     10            *                      before branch to main program. This call is made inside
     11            *                      the "startup_stm32l0xx.s" file.
     12            *
     13            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     14            *                                  by the user application to setup the SysTick
     15            *                                  timer or configure other parameters.
     16            *
     17            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     18            *                                 be called whenever the core clock is changed
     19            *                                 during program execution.
     20            *
     21            *
     22            ******************************************************************************
     23            * @attention
     24            *
     25            * <h2><center>&copy; Copyright(c) 2016 STMicroelectronics.
     26            * All rights reserved.</center></h2>
     27            *
     28            * This software component is licensed by ST under BSD 3-Clause license,
     29            * the "License"; You may not use this file except in compliance with the
     30            * License. You may obtain a copy of the License at:
     31            *                        opensource.org/licenses/BSD-3-Clause
     32            *
     33            ******************************************************************************
     34            */
     35          
     36          /** @addtogroup CMSIS
     37            * @{
     38            */
     39          
     40          /** @addtogroup stm32l0xx_system
     41            * @{
     42            */
     43          
     44          /** @addtogroup STM32L0xx_System_Private_Includes
     45            * @{
     46            */
     47          
     48          #include "stm32l0xx.h"
     49          
     50          #if !defined  (HSE_VALUE)
     51            #define HSE_VALUE    ((uint32_t)8000000U) /*!< Value of the External oscillator in Hz */
     52          #endif /* HSE_VALUE */
     53          
     54          #if !defined  (MSI_VALUE)
     55            #define MSI_VALUE    ((uint32_t)2097152U) /*!< Value of the Internal oscillator in Hz*/
     56          #endif /* MSI_VALUE */
     57          
     58          #if !defined  (HSI_VALUE)
     59            #define HSI_VALUE    ((uint32_t)16000000U) /*!< Value of the Internal oscillator in Hz*/
     60          #endif /* HSI_VALUE */
     61          
     62          
     63          /**
     64            * @}
     65            */
     66          
     67          /** @addtogroup STM32L0xx_System_Private_TypesDefinitions
     68            * @{
     69            */
     70          
     71          /**
     72            * @}
     73            */
     74          
     75          /** @addtogroup STM32L0xx_System_Private_Defines
     76            * @{
     77            */
     78          /************************* Miscellaneous Configuration ************************/
     79          
     80          /*!< Uncomment the following line if you need to relocate your vector Table in
     81               Internal SRAM. */
     82          /* #define VECT_TAB_SRAM */
     83          #define VECT_TAB_OFFSET  0x00U /*!< Vector Table base offset field.
     84                                             This value must be a multiple of 0x100. */
     85          /******************************************************************************/
     86          /**
     87            * @}
     88            */
     89          
     90          /** @addtogroup STM32L0xx_System_Private_Macros
     91            * @{
     92            */
     93          
     94          /**
     95            * @}
     96            */
     97          
     98          /** @addtogroup STM32L0xx_System_Private_Variables
     99            * @{
    100            */
    101            /* This variable is updated in three ways:
    102                1) by calling CMSIS function SystemCoreClockUpdate()
    103                2) by calling HAL API function HAL_RCC_GetHCLKFreq()
    104                3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
    105                   Note: If you use this function to configure the system clock; then there
    106                         is no need to call the 2 first functions listed above, since SystemCoreClock
    107                         variable is updated automatically.
    108            */

   \                                 In section .data, align 4
    109            uint32_t SystemCoreClock = 2097152U; /* 32.768 kHz * 2^6 */
   \                     SystemCoreClock:
   \        0x0   0x0020'0000        DC32 2'097'152

   \                                 In section .text, align 4, keep-with-next
    110            const uint8_t AHBPrescTable[16] = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
   \                     AHBPrescTable:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x01 0x02    

   \              0x03 0x04    

   \              0x06 0x07    

   \              0x08 0x09

   \                                 In section .rodata, align 4
    111            const uint8_t APBPrescTable[8] = {0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U};
   \                     APBPrescTable:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 1, 2, 3, 4

   \              0x00 0x00    

   \              0x01 0x02    

   \              0x03 0x04

   \                                 In section .text, align 4, keep-with-next
    112            const uint8_t PLLMulTable[9] = {3U, 4U, 6U, 8U, 12U, 16U, 24U, 32U, 48U};
   \                     PLLMulTable:
   \        0x0   0x03 0x04          DC8 3, 4, 6, 8, 12, 16, 24, 32, 48

   \              0x06 0x08    

   \              0x0C 0x10    

   \              0x18 0x20    

   \              0x30
   \        0x9                      DS8 3
    113          
    114          /**
    115            * @}
    116            */
    117          
    118          /** @addtogroup STM32L0xx_System_Private_FunctionPrototypes
    119            * @{
    120            */
    121          
    122          /**
    123            * @}
    124            */
    125          
    126          /** @addtogroup STM32L0xx_System_Private_Functions
    127            * @{
    128            */
    129          
    130          /**
    131            * @brief  Setup the microcontroller system.
    132            * @param  None
    133            * @retval None
    134            */

   \                                 In section .text, align 2, keep-with-next
    135          void SystemInit (void)
    136          {
    137          /*!< Set MSION bit */
    138            RCC->CR |= (uint32_t)0x00000100U;
   \                     SystemInit: (+1)
   \        0x0   0x....             LDR      R0,??DataTable3  ;; 0x40021000
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x0D82             LSRS     R2,R0,#+22
   \        0x6   0x430A             ORRS     R2,R2,R1
   \        0x8   0x6002             STR      R2,[R0, #+0]
    139          
    140            /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
    141            RCC->CFGR &= (uint32_t) 0x88FF400CU;
   \        0xA   0x68C1             LDR      R1,[R0, #+12]
   \        0xC   0x....             LDR      R2,??DataTable3_1  ;; 0x88ff400c
   \        0xE   0x400A             ANDS     R2,R2,R1
   \       0x10   0x60C2             STR      R2,[R0, #+12]
    142          
    143            /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
    144            RCC->CR &= (uint32_t)0xFEF6FFF6U;
   \       0x12   0x6801             LDR      R1,[R0, #+0]
   \       0x14   0x....             LDR      R2,??DataTable3_2  ;; 0xfef6fff6
   \       0x16   0x400A             ANDS     R2,R2,R1
   \       0x18   0x6002             STR      R2,[R0, #+0]
    145          
    146            /*!< Reset HSI48ON  bit */
    147            RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
   \       0x1A   0x6881             LDR      R1,[R0, #+8]
   \       0x1C   0x2201             MOVS     R2,#+1
   \       0x1E   0x4391             BICS     R1,R1,R2
   \       0x20   0x6081             STR      R1,[R0, #+8]
    148          
    149            /*!< Reset HSEBYP bit */
    150            RCC->CR &= (uint32_t)0xFFFBFFFFU;
   \       0x22   0x6801             LDR      R1,[R0, #+0]
   \       0x24   0x....             LDR      R2,??DataTable3_3  ;; 0xfffbffff
   \       0x26   0x400A             ANDS     R2,R2,R1
   \       0x28   0x6002             STR      R2,[R0, #+0]
    151          
    152            /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
    153            RCC->CFGR &= (uint32_t)0xFF02FFFFU;
   \       0x2A   0x68C1             LDR      R1,[R0, #+12]
   \       0x2C   0x....             LDR      R2,??DataTable3_4  ;; 0xff02ffff
   \       0x2E   0x400A             ANDS     R2,R2,R1
   \       0x30   0x60C2             STR      R2,[R0, #+12]
    154          
    155            /*!< Disable all interrupts */
    156            RCC->CIER = 0x00000000U;
   \       0x32   0x2100             MOVS     R1,#+0
   \       0x34   0x6101             STR      R1,[R0, #+16]
    157          
    158            /* Configure the Vector Table location add offset address ------------------*/
    159          #ifdef VECT_TAB_SRAM
    160            SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
    161          #else
    162            SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
   \       0x36   0x2080             MOVS     R0,#+128
   \       0x38   0x0500             LSLS     R0,R0,#+20       ;; #+134217728
   \       0x3A   0x....             LDR      R1,??DataTable3_5  ;; 0xe000ed08
   \       0x3C   0x6008             STR      R0,[R1, #+0]
    163          #endif
    164          }
   \       0x3E   0x4770             BX       LR               ;; return
    165          
    166          /**
    167            * @brief  Update SystemCoreClock according to Clock Register Values
    168            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    169            *         be used by the user application to setup the SysTick timer or configure
    170            *         other parameters.
    171            *
    172            * @note   Each time the core clock (HCLK) changes, this function must be called
    173            *         to update SystemCoreClock variable value. Otherwise, any configuration
    174            *         based on this variable will be incorrect.
    175            *
    176            * @note   - The system frequency computed by this function is not the real
    177            *           frequency in the chip. It is calculated based on the predefined
    178            *           constant and the selected clock source:
    179            *
    180            *           - If SYSCLK source is MSI, SystemCoreClock will contain the MSI
    181            *             value as defined by the MSI range.
    182            *
    183            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    184            *
    185            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    186            *
    187            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
    188            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    189            *
    190            *         (*) HSI_VALUE is a constant defined in stm32l0xx_hal.h file (default value
    191            *             16 MHz) but the real value may vary depending on the variations
    192            *             in voltage and temperature.
    193            *
    194            *         (**) HSE_VALUE is a constant defined in stm32l0xx_hal.h file (default value
    195            *              8 MHz), user has to ensure that HSE_VALUE is same as the real
    196            *              frequency of the crystal used. Otherwise, this function may
    197            *              have wrong result.
    198            *
    199            *         - The result of this function could be not correct when using fractional
    200            *           value for HSE crystal.
    201            * @param  None
    202            * @retval None
    203            */

   \                                 In section .text, align 4, keep-with-next
    204          void SystemCoreClockUpdate (void)
    205          {
   \                     SystemCoreClockUpdate: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
    206            uint32_t tmp = 0U, pllmul = 0U, plldiv = 0U, pllsource = 0U, msirange = 0U;
    207          
    208            /* Get SYSCLK source -------------------------------------------------------*/
    209            tmp = RCC->CFGR & RCC_CFGR_SWS;
   \        0x2   0x....             LDR      R4,??DataTable3  ;; 0x40021000
   \        0x4   0x68E0             LDR      R0,[R4, #+12]
    210          
    211            switch (tmp)
   \        0x6   0x....             LDR      R2,??DataTable3_6  ;; 0xf42400
   \        0x8   0x0893             LSRS     R3,R2,#+2
   \        0xA   0x2610             MOVS     R6,#+16
   \        0xC   0x0855             LSRS     R5,R2,#+1
   \        0xE   0x210C             MOVS     R1,#+12
   \       0x10   0x4001             ANDS     R1,R1,R0
   \       0x12   0xD004             BEQ      ??SystemCoreClockUpdate_0
   \       0x14   0x2904             CMP      R1,#+4
   \       0x16   0xD00A             BEQ      ??SystemCoreClockUpdate_1
   \       0x18   0x2908             CMP      R1,#+8
   \       0x1A   0xD00F             BEQ      ??SystemCoreClockUpdate_2
   \       0x1C   0xE010             B        ??SystemCoreClockUpdate_3
    212            {
    213              case 0x00U:  /* MSI used as system clock */
    214                msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> RCC_ICSCR_MSIRANGE_Pos;
   \                     ??SystemCoreClockUpdate_0: (+1)
   \       0x1E   0x6860             LDR      R0,[R4, #+4]
    215                SystemCoreClock = (32768U * (1U << (msirange + 1U)));
   \       0x20   0x2101             MOVS     R1,#+1
   \       0x22   0x0400             LSLS     R0,R0,#+16
   \       0x24   0x0F40             LSRS     R0,R0,#+29
   \       0x26   0x1C40             ADDS     R0,R0,#+1
   \       0x28   0x4081             LSLS     R1,R1,R0
   \       0x2A   0x03C8             LSLS     R0,R1,#+15
    216                break;
   \       0x2C   0xE01A             B        ??SystemCoreClockUpdate_4
    217              case 0x04U:  /* HSI used as system clock */
    218                if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
   \                     ??SystemCoreClockUpdate_1: (+1)
   \       0x2E   0x6820             LDR      R0,[R4, #+0]
   \       0x30   0x4006             ANDS     R6,R6,R0
   \       0x32   0xD001             BEQ      ??SystemCoreClockUpdate_5
    219                {
    220                  SystemCoreClock = HSI_VALUE / 4U;
   \       0x34   0x0018             MOVS     R0,R3
   \       0x36   0xE015             B        ??SystemCoreClockUpdate_4
    221                }
    222                else
    223                {
    224                  SystemCoreClock = HSI_VALUE;
   \                     ??SystemCoreClockUpdate_5: (+1)
   \       0x38   0x0010             MOVS     R0,R2
   \       0x3A   0xE013             B        ??SystemCoreClockUpdate_4
    225                }
    226                break;
    227              case 0x08U:  /* HSE used as system clock */
    228                SystemCoreClock = HSE_VALUE;
   \                     ??SystemCoreClockUpdate_2: (+1)
   \       0x3C   0x0028             MOVS     R0,R5
    229                break;
   \       0x3E   0xE011             B        ??SystemCoreClockUpdate_4
    230              default:  /* PLL used as system clock */
    231                /* Get PLL clock source and multiplication factor ----------------------*/
    232                pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
   \                     ??SystemCoreClockUpdate_3: (+1)
   \       0x40   0x68E0             LDR      R0,[R4, #+12]
    233                plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
   \       0x42   0x68E1             LDR      R1,[R4, #+12]
    234                pllmul = PLLMulTable[(pllmul >> RCC_CFGR_PLLMUL_Pos)];
   \       0x44   0x....             ADR.N    R7,PLLMulTable
   \       0x46   0x0280             LSLS     R0,R0,#+10
   \       0x48   0x0F00             LSRS     R0,R0,#+28
   \       0x4A   0x5C38             LDRB     R0,[R7, R0]
    235                plldiv = (plldiv >> RCC_CFGR_PLLDIV_Pos) + 1U;
   \       0x4C   0x0209             LSLS     R1,R1,#+8
   \       0x4E   0x0F89             LSRS     R1,R1,#+30
   \       0x50   0x1C49             ADDS     R1,R1,#+1
    236          
    237                pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
   \       0x52   0x68E7             LDR      R7,[R4, #+12]
    238          
    239                if (pllsource == 0x00U)
   \       0x54   0x03FF             LSLS     R7,R7,#+15
   \       0x56   0xD412             BMI      ??SystemCoreClockUpdate_6
    240                {
    241                  /* HSI oscillator clock selected as PLL clock entry */
    242                  if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
   \       0x58   0x6825             LDR      R5,[R4, #+0]
   \       0x5A   0x402E             ANDS     R6,R6,R5
   \       0x5C   0xD00D             BEQ      ??SystemCoreClockUpdate_7
    243                  {
    244                    SystemCoreClock = (((HSI_VALUE / 4U) * pllmul) / plldiv);
   \       0x5E   0x4358             MULS     R0,R3,R0
   \                     ??SystemCoreClockUpdate_8: (+1)
   \       0x60   0x....'....        BL       __aeabi_uidiv
    245                  }
    246                  else
    247                  {
    248                    SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
    249                  }
    250                }
    251                else
    252                {
    253                  /* HSE selected as PLL clock entry */
    254                  SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
    255                }
    256                break;
    257            }
    258            /* Compute HCLK clock frequency --------------------------------------------*/
    259            /* Get HCLK prescaler */
    260            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
   \                     ??SystemCoreClockUpdate_4: (+1)
   \       0x64   0x....             LDR      R1,??DataTable3_7
   \       0x66   0x6008             STR      R0,[R1, #+0]
   \       0x68   0x68E2             LDR      R2,[R4, #+12]
    261            /* HCLK clock frequency */
    262            SystemCoreClock >>= tmp;
   \       0x6A   0xBF00             Nop
   \       0x6C   0x....             ADR.N    R3,AHBPrescTable
   \       0x6E   0x0612             LSLS     R2,R2,#+24
   \       0x70   0x0F12             LSRS     R2,R2,#+28
   \       0x72   0x5C9A             LDRB     R2,[R3, R2]
   \       0x74   0x40D0             LSRS     R0,R0,R2
   \       0x76   0x6008             STR      R0,[R1, #+0]
    263          }
   \       0x78   0xBDF0             POP      {R4-R7,PC}       ;; return
   \                     ??SystemCoreClockUpdate_7: (+1)
   \       0x7A   0x4350             MULS     R0,R2,R0
   \       0x7C   0xE7F0             B        ??SystemCoreClockUpdate_8
   \                     ??SystemCoreClockUpdate_6: (+1)
   \       0x7E   0x4368             MULS     R0,R5,R0
   \       0x80   0xE7EE             B        ??SystemCoreClockUpdate_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x4002'1000        DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x88FF'400C        DC32     0x88ff400c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0xFEF6'FFF6        DC32     0xfef6fff6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0xFFFB'FFFF        DC32     0xfffbffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0xFF02'FFFF        DC32     0xff02ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0xE000'ED08        DC32     0xe000ed08

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x00F4'2400        DC32     0xf42400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \        0x0   0x....'....        DC32     SystemCoreClock
    264          
    265          
    266          
    267          /**
    268            * @}
    269            */
    270          
    271          /**
    272            * @}
    273            */
    274          
    275          /**
    276            * @}
    277            */
    278          
    279          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      20   SystemCoreClockUpdate
        20 __aeabi_uidiv
       0   SystemInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
      16  AHBPrescTable
       8  APBPrescTable
      12  PLLMulTable
       4  SystemCoreClock
     130  SystemCoreClockUpdate
      64  SystemInit

 
   4 bytes in section .data
   8 bytes in section .rodata
 254 bytes in section .text
 
 254 bytes of CODE  memory
   8 bytes of CONST memory
   4 bytes of DATA  memory

Errors: none
Warnings: none
