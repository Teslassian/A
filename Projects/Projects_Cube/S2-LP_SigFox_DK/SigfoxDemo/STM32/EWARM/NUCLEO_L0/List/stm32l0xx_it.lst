###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         12/Jan/2021  13:02:34
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\src\stm32l0xx_it.c
#    Command line             =
#        -f C:\Users\dvone\AppData\Local\Temp\EW7959.tmp
#        (C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\src\stm32l0xx_it.c
#        -D USE_STM32L0XX_NUCLEO -D USE_HAL_DRIVER -D USE_SYSTICK_DELAY -D
#        STM32L053xx -lC
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\List
#        -o
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\Obj
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\Sigfox_Libs\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\ST_API\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\BSP\SDK_Eval_STM32\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\MCU\STM32_HAL\STM32L0xx_HAL_Driver\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\MCU\CMSIS\STM32L0xx\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\S2LP_Middleware\STM32\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\Utils\STM32\inc\\
#        -Ohz --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.4\arm\CMSIS\Core\Include\\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.4\arm\CMSIS\DSP\Include\\")
#    Locale                   =  C
#    List file                =
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\List\stm32l0xx_it.lst
#    Object file              =
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\Obj\stm32l0xx_it.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#
###############################################################################

C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\src\stm32l0xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32l1xx_it.c
      4            * @author  MCD Application Team
      5            * @version V3.3.0
      6            * @date    21-March-2011
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and
      9            *          peripherals interrupt service routine.
     10            ******************************************************************************
     11            * @copy
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            *
     20            * <h2><center>&copy; COPYRIGHT 2015 STMicroelectronics</center></h2>
     21            */
     22          
     23          /* Includes ------------------------------------------------------------------*/
     24          #include "stm32l0xx_it.h"
     25          #include "cube_hal.h"
     26          
     27          /** @addtogroup Template_Project
     28            * @{
     29            */
     30          
     31          extern uint16_t counter;
     32          extern uint8_t firstinterrupt;
     33          
     34          
     35          /* Private typedef -----------------------------------------------------------*/
     36          /* Private define ------------------------------------------------------------*/
     37          /* Private macro -------------------------------------------------------------*/
     38          /* Private variables ---------------------------------------------------------*/
     39          
     40          
     41          /* Private function prototypes -----------------------------------------------*/
     42          /* Private functions ---------------------------------------------------------*/
     43          
     44          /******************************************************************************/
     45          /*            Cortex-M3 Processor Exceptions Handlers                         */
     46          /******************************************************************************/
     47          
     48          /**
     49            * @brief  This function handles NMI exception.
     50            * @param  None
     51            * @retval : None
     52            */

   \                                 In section .text, align 2, keep-with-next
     53          void NMI_Handler(void)
     54          {
     55          }
   \                     NMI_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
     56          
     57          /**
     58            * @brief  This function handles Hard Fault exception.
     59            * @param  None
     60            * @retval : None
     61            */

   \                                 In section .text, align 2, keep-with-next
     62          void HardFault_Handler(void)
     63          {
     64            /* Go to infinite loop when Hard Fault exception occurs */
     65            while (1)
   \                     HardFault_Handler: (+1)
   \                     ??HardFault_Handler_0: (+1)
   \        0x0   0xE7FE             B        ??HardFault_Handler_0
     66            {
     67            }
     68          }
     69          
     70          /**
     71            * @brief  This function handles Memory Manage exception.
     72            * @param  None
     73            * @retval : None
     74            */

   \                                 In section .text, align 2, keep-with-next
     75          void MemManage_Handler(void)
     76          {
     77            /* Go to infinite loop when Memory Manage exception occurs */
     78            while (1)
   \                     MemManage_Handler: (+1)
   \                     ??MemManage_Handler_0: (+1)
   \        0x0   0xE7FE             B        ??MemManage_Handler_0
     79            {
     80            }
     81          }
     82          
     83          /**
     84            * @brief  This function handles Bus Fault exception.
     85            * @param  None
     86            * @retval : None
     87            */

   \                                 In section .text, align 2, keep-with-next
     88          void BusFault_Handler(void)
     89          {
     90            /* Go to infinite loop when Bus Fault exception occurs */
     91            while (1)
   \                     BusFault_Handler: (+1)
   \                     ??BusFault_Handler_0: (+1)
   \        0x0   0xE7FE             B        ??BusFault_Handler_0
     92            {
     93            }
     94          }
     95          
     96          /**
     97            * @brief  This function handles Usage Fault exception.
     98            * @param  None
     99            * @retval : None
    100            */

   \                                 In section .text, align 2, keep-with-next
    101          void UsageFault_Handler(void)
    102          {
    103            /* Go to infinite loop when Usage Fault exception occurs */
    104            while (1)
   \                     UsageFault_Handler: (+1)
   \                     ??UsageFault_Handler_0: (+1)
   \        0x0   0xE7FE             B        ??UsageFault_Handler_0
    105            {
    106            }
    107          }
    108          
    109          /**
    110            * @brief  This function handles SVCall exception.
    111            * @param  None
    112            * @retval : None
    113            */

   \                                 In section .text, align 2, keep-with-next
    114          void SVC_Handler(void)
    115          {
    116          }
   \                     SVC_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    117          
    118          /**
    119            * @brief  This function handles Debug Monitor exception.
    120            * @param  None
    121            * @retval : None
    122            */

   \                                 In section .text, align 2, keep-with-next
    123          void DebugMon_Handler(void)
    124          {
    125          }
   \                     DebugMon_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    126          
    127          /**
    128            * @brief  This function handles PendSVC exception.
    129            * @param  None
    130            * @retval : None
    131            */

   \                                 In section .text, align 2, keep-with-next
    132          void PendSV_Handler(void)
    133          {
    134          }
   \                     PendSV_Handler: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    135          
    136          
    137          
    138          /*******************************************************************************
    139          * Function Name  : USB_LP_IRQHandler
    140          * Description    : This function handles USB Low Priority interrupts  requests.
    141          * Input          : None
    142          * Output         : None
    143          * Return         : None
    144          *******************************************************************************/
    145          //void USB_LP_IRQHandler(void)
    146          //{
    147          //  HAL_PCD_IRQHandler(&hpcd);
    148          //}
    149          

   \                                 In section .text, align 2, keep-with-next
    150          void EXTI0_1_IRQHandler(void)
    151          {
   \                     EXTI0_1_IRQHandler: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    152            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET) 
   \        0x2   0x....             LDR      R4,??DataTable3  ;; 0x40010414
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0x07C0             LSLS     R0,R0,#+31
   \        0x8   0xD502             BPL      ??EXTI0_1_IRQHandler_0
    153            {
    154              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0x....'....        BL       HAL_GPIO_EXTI_IRQHandler
    155            }
    156            
    157            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1) != RESET) 
   \                     ??EXTI0_1_IRQHandler_0: (+1)
   \       0x10   0x6820             LDR      R0,[R4, #+0]
   \       0x12   0x0780             LSLS     R0,R0,#+30
   \       0x14   0xD502             BPL      ??EXTI0_1_IRQHandler_1
    158            {
    159              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
   \       0x16   0x2002             MOVS     R0,#+2
   \       0x18   0x....'....        BL       HAL_GPIO_EXTI_IRQHandler
    160            }
    161          }
   \                     ??EXTI0_1_IRQHandler_1: (+1)
   \       0x1C   0xBD10             POP      {R4,PC}          ;; return
    162          

   \                                 In section .text, align 2, keep-with-next
    163          void EXTI2_3_IRQHandler(void)
    164          {
   \                     EXTI2_3_IRQHandler: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    165            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_2) != RESET) 
   \        0x2   0x....             LDR      R4,??DataTable3  ;; 0x40010414
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0x0740             LSLS     R0,R0,#+29
   \        0x8   0xD502             BPL      ??EXTI2_3_IRQHandler_0
    166            {
    167              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
   \        0xA   0x2004             MOVS     R0,#+4
   \        0xC   0x....'....        BL       HAL_GPIO_EXTI_IRQHandler
    168            }
    169            
    170            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET) 
   \                     ??EXTI2_3_IRQHandler_0: (+1)
   \       0x10   0x6820             LDR      R0,[R4, #+0]
   \       0x12   0x0700             LSLS     R0,R0,#+28
   \       0x14   0xD502             BPL      ??EXTI2_3_IRQHandler_1
    171            {
    172              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
   \       0x16   0x2008             MOVS     R0,#+8
   \       0x18   0x....'....        BL       HAL_GPIO_EXTI_IRQHandler
    173            }
    174          }
   \                     ??EXTI2_3_IRQHandler_1: (+1)
   \       0x1C   0xBD10             POP      {R4,PC}          ;; return
    175          /**
    176            * @brief  This function handles External External line 9 to 5 interrupt request.
    177            * @param  None
    178            * @retval None
    179            */

   \                                 In section .text, align 2, keep-with-next
    180          void EXTI4_15_IRQHandler(void)
    181          {
   \                     EXTI4_15_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    182            if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET) 
   \        0x2   0x....             LDR      R1,??DataTable3  ;; 0x40010414
   \        0x4   0x6808             LDR      R0,[R1, #+0]
   \        0x6   0x06C0             LSLS     R0,R0,#+27
   \        0x8   0xD501             BPL      ??EXTI4_15_IRQHandler_0
    183            {
    184              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
   \        0xA   0x2010             MOVS     R0,#+16
   \        0xC   0xE02E             B        ??EXTI4_15_IRQHandler_1
    185            }
    186            else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET) 
   \                     ??EXTI4_15_IRQHandler_0: (+1)
   \        0xE   0x6808             LDR      R0,[R1, #+0]
   \       0x10   0x0680             LSLS     R0,R0,#+26
   \       0x12   0xD501             BPL      ??EXTI4_15_IRQHandler_2
    187            {
    188              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
   \       0x14   0x2020             MOVS     R0,#+32
   \       0x16   0xE029             B        ??EXTI4_15_IRQHandler_1
    189            }
    190            else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET) 
   \                     ??EXTI4_15_IRQHandler_2: (+1)
   \       0x18   0x6808             LDR      R0,[R1, #+0]
   \       0x1A   0x0640             LSLS     R0,R0,#+25
   \       0x1C   0xD501             BPL      ??EXTI4_15_IRQHandler_3
    191            {
    192              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
   \       0x1E   0x2040             MOVS     R0,#+64
   \       0x20   0xE024             B        ??EXTI4_15_IRQHandler_1
    193            }
    194            else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET) 
   \                     ??EXTI4_15_IRQHandler_3: (+1)
   \       0x22   0x6808             LDR      R0,[R1, #+0]
   \       0x24   0x0600             LSLS     R0,R0,#+24
   \       0x26   0xD501             BPL      ??EXTI4_15_IRQHandler_4
    195            {
    196              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
   \       0x28   0x2080             MOVS     R0,#+128
   \       0x2A   0xE01F             B        ??EXTI4_15_IRQHandler_1
    197            }
    198            else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET) 
   \                     ??EXTI4_15_IRQHandler_4: (+1)
   \       0x2C   0x0D88             LSRS     R0,R1,#+22
   \       0x2E   0x680A             LDR      R2,[R1, #+0]
   \       0x30   0x4002             ANDS     R2,R2,R0
   \       0x32   0xD11B             BNE      ??EXTI4_15_IRQHandler_1
    199            {
    200              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
    201            }
    202            else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET) 
   \       0x34   0x0040             LSLS     R0,R0,#+1
   \       0x36   0x680A             LDR      R2,[R1, #+0]
   \       0x38   0x4002             ANDS     R2,R2,R0
   \       0x3A   0xD117             BNE      ??EXTI4_15_IRQHandler_1
    203            {
    204              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
    205            }
    206            
    207            else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET) 
   \       0x3C   0x0040             LSLS     R0,R0,#+1
   \       0x3E   0x680A             LDR      R2,[R1, #+0]
   \       0x40   0x4002             ANDS     R2,R2,R0
   \       0x42   0xD113             BNE      ??EXTI4_15_IRQHandler_1
    208            {
    209              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
    210            }
    211            else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET) 
   \       0x44   0x0040             LSLS     R0,R0,#+1
   \       0x46   0x680A             LDR      R2,[R1, #+0]
   \       0x48   0x4002             ANDS     R2,R2,R0
   \       0x4A   0xD10F             BNE      ??EXTI4_15_IRQHandler_1
    212            {
    213              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
    214            }
    215            else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET) 
   \       0x4C   0x0040             LSLS     R0,R0,#+1
   \       0x4E   0x680A             LDR      R2,[R1, #+0]
   \       0x50   0x4002             ANDS     R2,R2,R0
   \       0x52   0xD10B             BNE      ??EXTI4_15_IRQHandler_1
    216            {
    217              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
    218            }
    219            else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) 
   \       0x54   0x0040             LSLS     R0,R0,#+1
   \       0x56   0x680A             LDR      R2,[R1, #+0]
   \       0x58   0x4002             ANDS     R2,R2,R0
   \       0x5A   0xD107             BNE      ??EXTI4_15_IRQHandler_1
    220            {
    221              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
    222            }
    223            else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) 
   \       0x5C   0x0040             LSLS     R0,R0,#+1
   \       0x5E   0x680A             LDR      R2,[R1, #+0]
   \       0x60   0x4002             ANDS     R2,R2,R0
   \       0x62   0xD103             BNE      ??EXTI4_15_IRQHandler_1
    224            {
    225              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
    226            }
    227            else if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET) 
   \       0x64   0x0040             LSLS     R0,R0,#+1
   \       0x66   0x6809             LDR      R1,[R1, #+0]
   \       0x68   0x4001             ANDS     R1,R1,R0
   \       0x6A   0xD001             BEQ      ??EXTI4_15_IRQHandler_5
    228            {
    229              HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
   \                     ??EXTI4_15_IRQHandler_1: (+1)
   \       0x6C   0x....'....        BL       HAL_GPIO_EXTI_IRQHandler
    230            }
    231          
    232          }
   \                     ??EXTI4_15_IRQHandler_5: (+1)
   \       0x70   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x4001'0414        DC32     0x40010414
    233          
    234          
    235          
    236          /******************************************************************************/
    237          /*                 STM32L15x Peripherals Interrupt Handlers                   */
    238          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    239          /*  available peripheral interrupt handler's name please refer to the startup */
    240          /*  file (startup_stm32l1xx_lp.s).                                            */
    241          /******************************************************************************/
    242          
    243          /**
    244            * @brief  This function handles PPP interrupt request.
    245            * @param  None
    246            * @retval : None
    247            */
    248          /*void PPP_IRQHandler(void)
    249          {
    250          }*/
    251          
    252          /**
    253            * @}
    254            */
    255          
    256          
    257          /******************* (C) COPYRIGHT 2015 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   DebugMon_Handler
       8   EXTI0_1_IRQHandler
         8   -> HAL_GPIO_EXTI_IRQHandler
       8   EXTI2_3_IRQHandler
         8   -> HAL_GPIO_EXTI_IRQHandler
       8   EXTI4_15_IRQHandler
         8   -> HAL_GPIO_EXTI_IRQHandler
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
       0   PendSV_Handler
       0   SVC_Handler
       0   UsageFault_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       2  BusFault_Handler
       2  DebugMon_Handler
      30  EXTI0_1_IRQHandler
      30  EXTI2_3_IRQHandler
     114  EXTI4_15_IRQHandler
       2  HardFault_Handler
       2  MemManage_Handler
       2  NMI_Handler
       2  PendSV_Handler
       2  SVC_Handler
       2  UsageFault_Handler

 
 194 bytes in section .text
 
 194 bytes of CODE memory

Errors: none
Warnings: none
