###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         12/Jan/2021  13:32:46
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                    
#    Endian                   =  little
#    Source file              =
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\src\main.c
#    Command line             =
#        -f C:\Users\dvone\AppData\Local\Temp\EW1F0F.tmp
#        (C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\src\main.c
#        -D USE_STM32L0XX_NUCLEO -D USE_HAL_DRIVER -D USE_SYSTICK_DELAY -D
#        STM32L053xx -lC
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\List
#        -o
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\Obj
#        --debug --endian=little --cpu=Cortex-M0+ -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Normal.h" -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\Sigfox_Libs\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\ST_API\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\BSP\SDK_Eval_STM32\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\MCU\STM32_HAL\STM32L0xx_HAL_Driver\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\MCU\CMSIS\STM32L0xx\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\S2LP_Middleware\STM32\inc\\
#        -I
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\..\..\..\..\..\Drivers\Utils\STM32\inc\\
#        -Ohz --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.4\arm\CMSIS\Core\Include\\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.4\arm\CMSIS\DSP\Include\\")
#    Locale                   =  C
#    List file                =
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\List\main.lst
#    Object file              =
#        C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\STM32\EWARM\NUCLEO_L0\Obj\main.o
#    Runtime model:              
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  0
#      __dlib_version         =  6
#
###############################################################################

C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\src\main.c
      1          /**
      2          * @file main.c
      3          * This application demonstrates interfacing a DHT11 sensor to the S2LP chip, and sending the data via Sigfox to AWS.
      4          * @details
      5          * This application sets the MCU in low power. in order to debug it using a SWD debugger it is necessary to:
      6          * - call the following function in the initialization phase:
      7          * \code
      8          * ST_MCU_API_LowPower(0);
      9          * \endcode
     10          * - comment out the following lines.
     11          * \code
     12          * ST_MCU_API_GPIO_LowPower();
     13          * HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFI);
     14          * ST_MCU_API_SetSysClock();
     15          * ST_MCU_API_GPIO_Restore();
     16          * \endcode
     17          *
     18          * \section IAR_project IAR project
     19          To use the project with IAR Embedded Workbench for ARM, please follow the instructions below:
     20          -# Open the Embedded Workbench for ARM and select File->Open->Workspace menu.
     21          -# Open the IAR project
     22          -# Select desired configuration to build
     23          -# Select Project->Rebuild All. This will recompile and link the entire application
     24          -# Select Project->Download and Debug to download the related binary image.
     25          *
     26          */
     27          
     28          #include "st_main.h"
     29          
     30          #ifdef USE_FLASH
     31          #include <string.h>
     32          #endif
     33          
     34          /* a flag to understand if the button has been pressed */
     35          static volatile uint8_t but_pressed=0;
     36          
     37          // Initialization of the DHT11
     38          void DHT11_Start(void)
     39          {
     40            Set_Pin_Output(DHT11_Port, DHT11_Pin); //to set the pin as output
                   ^
Warning[Pe223]: function "Set_Pin_Output" declared implicitly

    Set_Pin_Output(DHT11_Port, DHT11_Pin); //to set the pin as output
                   ^
"C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\src\main.c",40  Error[Pe020]: 
          identifier "DHT11_Port" is undefined

    Set_Pin_Output(DHT11_Port, DHT11_Pin); //to set the pin as output
                               ^
"C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\src\main.c",40  Error[Pe020]: 
          identifier "DHT11_Pin" is undefined
     41            HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0); //to pull the pin low
                                     ^
Error[Pe020]: identifier "DHT11_PORT" is undefined

    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0); //to pull the pin low
                                  ^
"C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\src\main.c",41  Error[Pe020]: 
          identifier "DHT11_PIN" is undefined

    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0); //to pull the pin low
                                             ^
"C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\src\main.c",41  Warning[Pe188]: 
          enumerated type mixed with another type
     42            delay(18000); //wait for 18ms
                   ^
Warning[Pe223]: function "delay" declared implicitly
     43            Set_Pin_Input(DHT11_PORT, DHT11_PIN); //to set the pin as input
                   ^
Warning[Pe223]: function "Set_Pin_Input" declared implicitly
     44          }
     45            
     46          // Check that the DHT11 pin is high
     47          uint8_t Check_Response(void)
     48          {
     49            uint8_t Response = 0;
     50            delay(40);
                   ^
Warning[Pe223]: function "delay" declared implicitly
     51            if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
                                          ^
Error[Pe020]: identifier "DHT11_PORT" is undefined

    if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
                                       ^
"C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\src\main.c",51  Error[Pe020]: 
          identifier "DHT11_PIN" is undefined
     52            {
     53              delay(80);
     54              if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) Response = 1;
     55              else Response = -1;
     56            }
     57            while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))); // wait for low on the pin
                                            ^
Error[Pe020]: identifier "DHT11_PORT" is undefined

    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))); // wait for low on the pin
                                         ^
"C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\src\main.c",57  Error[Pe020]: 
          identifier "DHT11_PIN" is undefined
     58          
     59            return Response;
     60          }
     61          
     62          // Read the DHT11 data
     63          uint8_t DHT11_Read(void)
     64          {
     65            uint8_t i,j;
     66            for (j=0;j<8;j++)
     67            {
     68              while (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))); // wait for the pin to go high
                                              ^
Error[Pe020]: identifier "DHT11_PORT" is undefined

      while (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))); // wait for the pin to go high
                                           ^
"C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\src\main.c",68  Error[Pe020]: 
          identifier "DHT11_PIN" is undefined

      while (!HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))); // wait for the pin to go high
                                                      ^
"C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\src\main.c",68  Error[Pe029]: 
          expected an expression
     69              delay(40) // wait for 40us - bit length of "0" is 26-28us; thus if the pin is high after 40us, the bit is "1"
                     ^
Warning[Pe223]: function "delay" declared implicitly
     70              if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) 
                     ^
Error[Pe065]: expected a ";"
     71              {
     72                i&= ~(1<<(7-j)); // if the pin is low, write a 0
     73              }
     74              else i|= (1<<(7-j)); // if the pin is high, write a 1
                                        ^
Warning[Pe012]: parsing restarts here after previous syntax error
     75              while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))); // wait for the pin to gow low
                                              ^
Error[Pe020]: identifier "DHT11_PORT" is undefined

      while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))); // wait for the pin to gow low
                                           ^
"C:\Users\dvone\Desktop\Divigraph\SigfoxDemo\Projects\Projects_Cube\S2-LP_SigFox_DK\SigfoxDemo\src\main.c",75  Error[Pe020]: 
          identifier "DHT11_PIN" is undefined
     76            }
     77            return i;
                          ^
Warning[Pe549]: variable "i" is used before its value is set
     78          }
     79          
     80          //Button Interrupt
     81          void Appli_Exti_CB(uint32_t GPIO_Pin)
     82          {
     83            /* set the button pressed flag */
     84            but_pressed=1;
     85          }
     86          
     87          // Blinks the LED
     88          void LedBlink(SdkEvalLed led, uint8_t times)
     89          {
     90            SdkEvalLedInit(led);
     91          
     92            for(uint8_t i=0;i<times;i++)
     93            {
     94              SdkEvalLedToggle(led);
     95              SdkDelayMs(50);
     96            }
     97          
     98            SdkEvalLedOn(led);
     99          }
    100          
    101          // Blinks the LED indefinitely, causing the application to get stuck
    102          void Fatal_Error(void)
    103          {
    104            SdkEvalLedInit(LED2);
    105          
    106            while(1)
    107            {
    108              SdkDelayMs(100);
    109              SdkEvalLedToggle(LED2);
    110            }
    111          }
    112          
    113          // Main function
    114          int main(void)
    115          {
    116            /* Some local variables to handle the workflow */
    117            ST_SFX_ERR stSfxRetErr;
    118            uint8_t ret_err, use_public_key = 0;
    119          
    120            /* Some variables to store the application data to transmit */
    121            uint32_t cust_counter=0;
    122            uint8_t customer_data[12]={0};
    123            uint8_t customer_resp[8];
    124          
    125            /* Prevent the MCU from going into Low Power mode */
    126            ST_MCU_API_LowPower(0);
    127          
    128            /* System initialization function */
    129            ret_err = ST_Init();
    130          
    131            if(ret_err)
    132              Fatal_Error();
    133          
    134            SdkDelayMs(10); //Wait for CS to rise
    135          
    136            /* Reset S2LP */
    137            S2LPShutdownEnter();
    138            SdkDelayMs(10);
    139            S2LPShutdownExit();
    140          
    141            /* Set the Push Button 2 as an input. If the application is started with the
    142            PUSH BUTTON 2 pressed, the public KEY is used by the applicaiton.
    143            This is useful for testing purposes or to use the SNEK emulator to receive
    144            Sigfox messages. */
    145            if (ButtonInit())
    146            {
    147              use_public_key=1;
    148              LedBlink(LED3, 1);
    149          
    150              while(IsButtonPressed());	/* Wait until button is pressed */
    151          
    152              LedBlink(LED3, 1);
    153            }
    154          
    155            /* The low level driver uses the internal RTC as a timer while the STM32 is in low power.
    156            This function calibrates the RTC using an auxiliary general purpose timer in order to
    157            increase its precision. */
    158            ST_MCU_API_TimerCalibration(500);
    159          
    160            /* Initialize push button 2 on the board as an interrupt */
    161            ButtonSetIRQ();
    162          
    163            if(S2LPEvalGetHasEeprom())
    164            {
    165              /* Shutdown S2-LP in order to read EEPROM */
    166              ST_MCU_API_Shutdown(1);
    167              SdkDelayMs(1);
    168          
    169              /* Set EEPROM CS */
    170             if(SdkEvalGetDaughterBoardType() == FKI_SERIES)
    171          	EepromCsPinInitialization();
    172             else
    173          	EepromCsXnucleoPinInitialization();
    174            }
    175          
    176            /* Init the Sigfox Library and the device for Sigfox communication*/
    177            NVM_BoardDataType boardData;
    178            stSfxRetErr = ST_Sigfox_Init(&boardData, 1);
    179          
    180            if(stSfxRetErr != ST_SFX_ERR_NONE)
    181              Fatal_Error();
    182          
    183            if(use_public_key)
    184              enc_utils_set_public_key(1);
    185          
    186            SdkEvalLedInit(LED1);
    187            SdkEvalLedOn(LED1);
    188          
    189            /* application main loop */
    190            while(1)
    191            {
    192              // /* Go in low power with the STM32 waiting for an external interrupt */
    193              // ST_MCU_API_GPIO_LowPower();
    194              // HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON,PWR_STOPENTRY_WFI);
    195              // ST_MCU_API_SetSysClock();
    196              // ST_MCU_API_GPIO_Restore();
    197          
    198              if(but_pressed)
    199              {
    200                LedBlink(LED3, 6);
    201          
    202                /* If the interrupt is raised, prepare the buffer to send with a 4-bytes counter */
    203                cust_counter++;
    204          
    205          	for(uint8_t i=0;i<4;i++)
    206          	  customer_data[i]=(uint8_t)(cust_counter>>((3-i)*8));
    207          
    208                /* Call the send_frame function */
    209                SIGFOX_API_send_frame(customer_data,4,customer_resp,2,0);
    210          
    211                LedBlink(LED3, 6);
    212                but_pressed=0;
    213              }
    214            }
    215          }
    216          
    217          #ifdef  USE_FULL_ASSERT
    218          /**
    219          * @brief  Reports the name of the source file and the source line number
    220          *         where the assert_param error has occurred.
    221          * @param file: pointer to the source file name
    222          * @param line: assert_param error line source number
    223          * @retval : None
    224          */
    225          void assert_failed(uint8_t* file, uint32_t line)
    226          {
    227            /* User can add his own implementation to report the file name and line number */
    228            //printf("Wrong parameters value: file %s on line %d\r\n", file, line);
    229          
    230            /* Infinite loop */
    231            while (1)
    232            {
    233            }
    234          }
    235          #endif
    236          
    237          
    238          /******************* (C) COPYRIGHT 2018 STMicroelectronics *****END OF FILE*****/

Errors: 14
Warnings: 8
